[["index.html", "iPhylo Tutorial Welcome Citation", " iPhylo Tutorial Chen Peng and Yueer Li 2023-12-23 Welcome We present the iPhylo suite (https://www.iphylo.net/), a comprehensive, automated, and interactive platform for biological and chemical taxonomic analysis. Citation Please cite iPhlyo if it helps your research: Yueer Li#, Chen Peng#, Fei Chi, Zinuo Huang, Mengyi Yuan, Chao Jiang* (2023). The iPhylo suite: an interactive platform for building and annotating biological and chemical taxonomic trees. "],["introduction.html", "1 Introduction", " 1 Introduction Accurate and rapid taxonomic classifications are essential for systematically exploring organisms and metabolites in diverse environments. Many tools have been developed for biological taxonomic trees, but limitations apply, and a streamlined method for constructing chemical taxonomic trees is lacking. We present the iPhylo suite: a fully automated and interactive platform for biological and chemical taxonomic analysis. The iPhylo suite includes three modules. Two web-based modules, iPhylo Tree and iPhylo Visual, aim to streamline the workflow, encompassing tree generation, interactive tree visualization, and extensive graphic and textual annotations. A stand-alone module, iPhylo CLI, was designed for local use and high-performance computing applications and equipped with up-to-date biological and chemical taxonomic databases. "],["iphylo-tree.html", "2 iPhylo Tree 2.1 Working on the Tree page", " 2 iPhylo Tree iPhylo Tree is an online web application that rapidly generates biological or chemical taxonomic trees for up to tens of thousands of organisms and chemicals within minutes. iPhylo Tree can be accessed via https://www.iphylo.net/tree, or though the Tree button on the iPhylo homepage welcome image or navigation bar. 2.1 Working on the Tree page You can easily build your tree on through the form on the tree page. Select the tree type: Switch between the Phylo Tree and Chem Tree tabs to choose whether you want to generate a phylogenetic tree or a chemical classification tree. Specify your tree: Though this section, you can set the tree content and name. Interrupt at: Choose a level to interrupt your tree. See interrupt Tree Name: Specify a name for your tree, and the output file will be named accordingly. Upload elements from file: Arrange your tree elements (taxa or chemicals) in a .txt file to upload. This is useful when you need to upload many elements. Tree elements: You can also type the tree elements in this box. If you both upload the file and enter this box, we will generate a tree based on the contents of the file. File Options: Specify the options for the output with this section. Branch Length: Choose whether the generated tree contains branch lengths. See branch length. Format: Opt to download the result tree in NEXUS, Newick or phyloXML formats. The TXT format is mandatory for download. You can alse choose ASCII Tree to get an ASCII representation of the tree structure. See output. Plot Options: PDF visualization of the tree structure. See output. Examples: We have provided 6 examples for biological and chemical trees respectively, which are just a click away to try. Corresponding descriptions are provided below each example input. Generate Tree: Click this button to submit this form. "],["tree-object.html", "3 Tree Object 3.1 Taxonomic level 3.2 Branch length 3.3 Nodes 3.4 Manipulate your tree", " 3 Tree Object 3.1 Taxonomic level Biological: iPhylo trees show the taxonomic structure in 8 main taxonomic ranks: Domain, Kingdom, Phylum, Class, Order, Family, Genus, Species level of NCBI taxonomy database. If the node entered is outside of these ranks, e.g. subfamily, iPhylo will keep your node and provide the parent main rank above this rank. Chemical: iPhylo creates chemical taxonomic trees according to the classification methodology ChemOnt. The resulting chemical classification tree is organized around chemical taxonomy, starting from the highest level and descending to the lowest level: Kingdom, SuperClass, Class, SubClass, Parent Level 1, and Parent Level 2. The last two categories represent two taxonomic levels directly below SubClass. 3.2 Branch length iPhylo tree don’t contain branch length information or support value, however you can set all branch length to 1.00000 for visual clarity and subsequent analysis in external software. 3.3 Nodes All nodes in the biological tree are labeled with scientific names. The leaf nodes (the last node of each branch) of the chemical tree are labeled with ids, and the other internal nodes are labeled with compound category names, like “Glycerolipids”. Don’t worry about figuring out which compounds the ids correspond to, we’ll provide a table of correspondences. id name inchi inchikey inchikey_Planar SMILES kingdom superclass class subclass parent_level_1 parent_level_2 2055 9-SAHHDA InChI=1S/C35H68O4/c1-3-5-7-9-11-12-13-14-15-16-17-18-19-24-28-32-35(38)39-33(29-25-21-10-8-6-4-2)30-26-22-20-23-27-31-34(36)37/h33H,3-32H2,1-2H3,(H,36,37) RNTVFRIIJJCYMG-UHFFFAOYSA-N NA O=C(O)CCCCCCCC(OC(=O)CCCCCCCCCCCCCCCCC)CCCCCCCC Organic_compounds Lipids_and_lipid_like_molecules Fatty_Acyls Fatty_acids_and_conjugates Long_chain_fatty_acids NA 460647 BMP 40:2 InChI=1S/C46H87O10P/c1-3-5-7-9-11-13-15-17-18-19-20-21-22-23-24-26-28-30-32-34-36-38-46(50)56-44(40-48)42-54-57(51,52)53-41-43(39-47)55-45(49)37-35-33-31-29-27-25-16-14-12-10-8-6-4-2/h15,17,19-20,43-44,47-48H,3-14,16,18,21-42H2,1-2H3,(H,51,52)/b17-15-,20-19- AAABPESZRWCLEX-YVCOGYDTSA-N NA O=C(OC(CO)COP(=O)(O)OCC(OC(=O)CCCCCCCCCCCCCCC)CO)CCCCCCCCCCCC=CCC=CCCCCCCC Organic_compounds Lipids_and_lipid_like_molecules Glycerophospholipids Lysobisphosphatidic_acids NA 979858 Cer 9:0;2O/32:8 InChI=1S/C41H67NO3/c1-3-5-7-9-10-11-12-13-14-15-16-17-18-19-20-21-22-23-24-25-26-27-28-29-30-31-32-33-35-37-41(45)42-39(38-43)40(44)36-34-8-6-4-2/h5,7,10-11,13-14,16-17,19-20,22-23,25-26,28-29,39-40,43-44H,3-4,6,8-9,12,15,18,21,24,27,30-38H2,1-2H3,(H,42,45)/b7-5-,11-10-,14-13-,17-16-,20-19-,23-22-,26-25-,29-28- AAAAJZXUELYQDP-KRXQTBQASA-N NA O=C(NC(CO)C(O)CCCCCC)CCCCCCC=CCC=CCC=CCC=CCC=CCC=CCC=CCC=CCC Organic_compounds Organic_oxygen_compounds Organooxygen_compounds Alcohols_and_polyols Secondary_alcohols NA 1013 Cer 8:1;2O/26:5 InChI=1S/C34H57NO3/c1-3-5-7-8-9-10-11-12-13-14-15-16-17-18-19-20-21-22-23-24-25-26-28-30-34(38)35-32(31-36)33(37)29-27-6-4-2/h5,7,9-10,12-13,15-16,18-19,27,29,32-33,36-37H,3-4,6,8,11,14,17,20-26,28,30-31H2,1-2H3,(H,35,38)/b7-5-,10-9-,13-12-,16-15-,19-18-,29-27+ QABMGQOLCJWSNA-GVWODYQASA-N NA O=C(NC(CO)C(O)C=CCCC)CCCCCCCCCC=CCC=CCC=CCC=CCC=CCC Organic_compounds Organic_oxygen_compounds Organooxygen_compounds Alcohols_and_polyols Secondary_alcohols NA 712566 mycalamide E InChI=1S/C25H43NO10/c1-13-10-25(32-8,36-15(3)14(13)2)20(28)22(29)26-23-19-18(33-12-34-23)21(31-7)24(4,5)17(35-19)9-16(11-27)30-6/h14-21,23,27-28H,1,9-12H2,2-8H3,(H,26,29)/t14-,15-,16+,17-,18+,19+,20-,21-,23+,25-/m1/s1 AAABMNXUOFPYQK-GRMLSQNXSA-N NA C[C@H]1C@HC Organic_compounds Organoheterocyclic_compounds Pyranodioxins NA 2141 1-Cinnamoylpyrrolidine InChI=1S/C13H15NO/c15-13(14-10-4-5-11-14)9-8-12-6-2-1-3-7-12/h1-3,6-9H,4-5,10-11H2 JSIGICUAXLIURX-UHFFFAOYSA-N NA O=C(C=CC=1C=CC=CC1)N2CCCC2 Organic_compounds Phenylpropanoids_and_polyketides Cinnamic_acids_and_derivatives NA 3.4 Manipulate your tree 3.4.1 Interrupt Use the Interrupt at check box to interrupt the extension of a tree branch at any specific taxonomy level. This function will significantly avoid the formation of excessively large trees with an overwhelming number of nodes. 3.4.2 Sub-tree You can quickly obtain a full-clade tree for any taxonomic level using the operator |subtree. The resulting sub-tree comprises the common ancestor and all its descendants in the specified clade. For example: Primates|subtree Liliaceae|subtree This feature in chemical classification tree needs to input the chemical category names as the prefixes. For example: Hydroxyindoles|subtree Pentalenes|subtree Organophosphorus compounds|subtree "],["input-output.html", "4 Input &amp; Output 4.1 Input 4.2 Output", " 4 Input &amp; Output 4.1 Input 4.1.1 Input elements You can use the following element types, or any combination of them. Biological elements should be separated by commas or newlines. Chemical elements should be separated by newlines to prevent potential misinterpretation of names due to commas. 4.1.2 Biological Organism names: The names are flexible as long as they are indexed in the NCBI taxonomic database, such as “scientific name”, “synonym”, or “common name”. For example, “human” can serve as the common name for “Homo sapiens”. All leaf nodes within the iPhylo trees will be their corresponding scientific name. You can see how name changed in the output text file. For instance: honey bee -&gt; Apis mellifera house mouse -&gt; Mus musculus human -&gt; Homo sapiens Taxonomy identifiers (taxid) Subtree: Follows the format “xxx|subtree”, see details in Sub-tree. 4.1.3 Chemical InChIKey: We strongly recommend using InChIKey to represent chemicals due to its uniqueness and conciseness. Other formats may lack complete information in the database. isomeric SMILES InChI Subtree: Follows the format “xxx|subtree”, see details in Sub-tree. 4.2 Output 4.2.1 Tree file iPhylo can generate trees in the following formats: Newick, Nexus, and PhyloXML. Newick Format: Description: Newick, also known as New Hampshire or New Hampshire Extended format, is a simple and widely used text-based format for representing phylogenetic trees. It expresses tree structures using nested parentheses and commas. Example: (A:0.1,B:0.2,(C:0.3,D:0.4):0.5); Usage: It’s commonly used for representing hierarchical relationships in evolutionary biology and bioinformatics. Nexus Format: Description: Nexus is a versatile file format that can store various types of biological data, including phylogenetic trees. It allows the inclusion of metadata, DNA/protein sequences, and more. It is both human-readable and writable. Example: #NEXUS Begin trees; Tree myTree = (A,B,(C,D)); End; Usage: Nexus is often used in phylogenetics, systematics, and evolutionary biology due to its flexibility. PhyloXML: Description: PhyloXML is an XML-based format designed to store and exchange phylogenetic trees and associated data. It supports a variety of information, including node labels, branch lengths, and annotations. Example: &lt;phylogeny&gt; &lt;clade&gt; &lt;name&gt;A&lt;/name&gt; &lt;branch_length&gt;0.1&lt;/branch_length&gt; &lt;/clade&gt; &lt;clade&gt; &lt;name&gt;B&lt;/name&gt; &lt;branch_length&gt;0.2&lt;/branch_length&gt; &lt;/clade&gt; &lt;clade&gt; &lt;name&gt;C&lt;/name&gt; &lt;branch_length&gt;0.3&lt;/branch_length&gt; &lt;/clade&gt; &lt;clade&gt; &lt;name&gt;D&lt;/name&gt; &lt;branch_length&gt;0.4&lt;/branch_length&gt; &lt;/clade&gt; &lt;/phylogeny&gt; Usage: PhyloXML is suitable for storing and sharing complex phylogenetic data, often used in bioinformatics. Phylip Format: Description: The Phylip (PHYLogeny Inference Package) format is a simple, line-based format developed for use with the Phylip software package. It is used to represent both sequence data and phylogenetic trees. Example: 4 A 0.0 0.1 0.2 B 0.1 0.0 0.3 C 0.2 0.3 0.0 D 0.3 0.2 0.1 Usage: Phylip format is commonly used for input and output in phylogenetic analysis software and tools. These formats cater to different needs, from simple tree representations to more complex structures with additional metadata. The choice of format often depends on the specific requirements of the analysis or tool being used. 4.2.2 Tree structure visualizations ASCII Tree: Simple pretty-printing of your tree structures using pure ASCII characters for drawing branches and edges. For instance: _____ ____ _____ ____ _____ _____ s__Drosophila_melanogaster | _____ ____| _____ ____ _____ _____ s__Mus_musculus | | ____| | |_____| |_____ ____ _____ _____ s__Homo_sapiens ______| | | |____ _____ ____ _____ _____ s__Gallus_gallus | |_____ ____ _____ ____ _____ ____ _____ _____ s__Escherichia_coli Simple tree plot: The phylograph in PDF format, with clades colored by phyla or superclass. Plots are drawn using ggtree For instance: Rectangular Plot Circular Plot 4.2.3 Additional files When running iPhylo, we generate some other files to help you understand the tree better: iphylo_tree_items.csv, ichem_tree_items.csv These spreadsheet enlist the taxID (id for chemicals), scientific name (name, InChI, InChIKey, SMILES for chemicals) and lineage for the taxa you input. iphylo_tree_items_for_anno.csv Similar to iphylo_tree_items.csv, but tailored for iPhylo Visual, serves as an annotation for basic visualization of tree leaves. It can be directly uploaded to iPhylo Visual for enhanced visualization and annotation. no_match_result.txt This file is used to alert you when you have input taxIDs and names that are not in the NCBI taxonomy database, or when you have input a name that corresponds to more than one taxID. Note that the taxID is the unique identifier for NCBI taxonomy database entries. In the case of chemical trees, this file is used to indicate which compounds are not in the iPhylo database or are missing classification information. Our database mainly contains functional compounds, if you want more more compounds information, try our iPhylo CLI chemoline module. "],["integration-with-iphylo-visual.html", "5 Integration with iPhylo Visual", " 5 Integration with iPhylo Visual After generating the tree, clicking the VISUALIZE button opens a new iPhylo Visual page, automatically importing the generated tree and leaf annotation file. In the Main panel, simply click the Go button on the page to display the tree’s graphical representation without the need for additional file uploads. In the Leaf Annotation panel, you can directly choose the annotation type, and we will automatically update the dropdown selector based on the generated tree. "],["iphylo-cli.html", "6 iPhylo CLI 6.1 Set up 6.2 Packages environment", " 6 iPhylo CLI The iPhylo Command-Line Interface (CLI) is an extension of the web-based iPhylo Tree. It operates offline and comes with integrated databases, which can be deployed either locally or on high-performance computing clusters for enhanced performance. Importantly, the iPhylo CLI can also construct customized taxonomic trees based on a user-defined hierarchical database so the applications of the iPhylo suite can be extended beyond biological and chemical classifications. The GitHub repository for iPhylo CLI can be accessed via https://github.com/ARise-fox/iPhylo-CLI/ The iPhylo CLI includes four modules: Phylotree Chemtree Chem Online CSV2Tree 6.1 Set up Please use the Python 3 environment. The develope and test environment is Python 38. Please keep your network available for the first load, as well as enough space on your disk (about 2G), as the initial run needs to fetch the online database resources. 6.2 Packages environment git clone https://github.com/ARise-fox/iPhylo-CLI.git to clone this project to your local directory. Use pip install -r requirements.txt to preload the required packages. "],["modules.html", "7 Modules 7.1 Phylotree 7.2 Chemtree 7.3 Chem Online 7.4 CSV2Tree", " 7 Modules Here we provide introduction to each module along with example commands. Please ensure that you are running the correct Python environment and execute these commands within the local project directory of iPhylo CLI. If you choose to run them from other directories, we recommend specifying the script’s location using an absolute path. 7.1 Phylotree The phylo tree module offers the same functionality as the iPhylo Tree online web application, but run locally. Run the following command to see a description of the module and help about the parameters. python iphylo.py phylotree -h Use the following commands to start your try: python iphylo.py phylotree -i &quot;Homo sapiens,Mus musculus,Gallus gallus,Drosophila melanogaster,Escherichia coli&quot; python iphylo.py phylotree -i 9606,10090,9031,7227,562 7.2 Chemtree This module is used to generate a taxonomic tree of chemicals, run the following command for help python iphylo.py chemtree -h Use the following commands to start your try: python iphylo.py chemtree -f &#39;example/inchikeys.txt&#39; -fn &#39;chem\\_01&#39; 7.3 Chem Online The exclusive online chemical module enables chemical information retrieval from ClassyFire API, including the chemicals processed with corresponding taxonomy data stored in ClassyFire’s database. Over 70 million chemicals can be queried through this online module, which is continually growing. This feature significantly augments the capabilities of chemical taxonomy analysis. Run the following command for help: python iphylo.py chemonline -h Use the following commands to have some try: python iphylo.py chemonline -f &#39;example/inchikeys\\_for\\_online.txt&#39; -fn &#39;chem\\_02&#39; 7.4 CSV2Tree You can use this module to build a tree for any data with a hierarchy. Use the following command for more help information: python iphylo.py csv2tree --help The data should be presented in a csv table, with each row representing a categorized piece of information and each column representing a categorization level. Here is an example of statistical analysis methods: Input table Statistical Analysis Hypothesis Tests Parametric Tests One Sample t test Statistical Analysis Hypothesis Tests Parametric Tests One Sample z test Statistical Analysis Hypothesis Tests Parametric Tests Two Samples Independent Samples Two-group t test Statistical Analysis Hypothesis Tests Parametric Tests Two Samples Independent Samples z test Statistical Analysis Hypothesis Tests Nonparametric Tests One Samples Kolmogorov-Smirnov Statistical Analysis Hypothesis Tests Nonparametric Tests One Samples Binomial Statistical Analysis Hypothesis Tests Nonparametric Tests Two Samples Paired Samples Wilcoxon Statistical Analysis Hypothesis Tests Nonparametric Tests Two Samples Paired Samples Chi-square Output tree in Newick format ((((((Chi-square,Wilcoxon)Paired_Samples)Two_Samples,(Binomial,Kolmogorov-Smirnov)One_Samples)Nonparametric_Tests,(((z_test,Two-group_t_test)Independent_Samples)Two_Samples,(z_test,t_test)One_Sample)Parametric_Tests)Hypothesis_Tests)Statistical_Analysis); Plot by iPhylo Visual "],["iPhylo_v.html", "8 iPhylo Visual", " 8 iPhylo Visual The iPhylo Visual was developed based on the R framework for visualizing and extensively annotating taxonomic trees (https://www.iphylo.net/visual/). The iPhylo Visual also offers the convenience of saving and uploading work sessions locally, as well as access to source codes for plotting and annotating. The iPhylo Visual leverages the full graphical capabilities of ggtree1 and ggtreeExtra2 for visualizing, manipulating, and annotating tree-structured data. The iPhylo Visual is an interactive online tool designed to facilitate the display, annotation, and inspection of tree-based structures, including but not limited to phylogenetic and chemical taxonomic trees generated from iPhylo modules. The iPhylo Visual simplifies the process of annotating taxonomic trees by adopting a data frame-compatible format, enabling users to encapsulate all required information within one data frame for leaf annotation and one data frame for node annotation, respectively. Within the data frame, rows correspond to tree nodes, and columns represent specific features. Users can efficiently navigate and manage these uploaded data frames through the provided online table viewer, with sorting and retrieval capabilities. This design avoids uploading multiple annotation files and is directly compatible with R. Guangchuang Yu. Using ggtree to visualize data on tree-like structures. Current Protocols in Bioinformatics, 2020, 69:e96. doi:10.1002/cpbi.96↩︎ S Xu, Z Dai, P Guo, X Fu, S Liu, L Zhou, W Tang, T Feng, M Chen, L Zhan, T Wu, E Hu, Y Jiang, X Bo, G Yu. ggtreeExtra: Compact visualization of richly annotated phylogenetic data. Molecular Biology and Evolution 2021, 38(9):4039-4042. doi:10.1093/molbev/msab166↩︎ "],["user-interface.html", "9 User interface 9.1 Dashboard 9.2 Inspection 9.3 Help 9.4 Gallery and demo", " 9 User interface 9.1 Dashboard The dashboard page hosts the main annotation and display functions of iPhylo Visual. The user interface consists of several main components: Tree Display: The tree will be displayed in the main panel of the webpage in the form of a vector image. Click the plus (+) and minus (-) buttons on the display panel to zoom in and out of the tree visualization. Move and scroll the mouse cursor to move the visualization within the display panel. Refresh Diagram: Once the user uploads a tree file, the GO button, which is used to refresh the graphical representation of the tree file, will become enabled. To ensure optimal performance, adjustments made to the display or annotation parameters will not immediately update the tree image. Instead, you need to click the “GO” button to refresh the image after modifying any settings. Download: Click the PNG or PDF download button to get the visualization in preferred formats. Click the Save Session button to download the .iphylo project file, as detailed in the Session section. Session Upload: The session upload widget allows users to upload previously saved project files. Click the reload buttonto confirm the project and restore session data. Control Panel: The majority of iPhylo Visual controls and functions are available here, split over 3 sections: Basic, Leaf Annotation and Node Annotation. Basic Controls: iPhylo Visual’s basic controls allow users to adjust the fundamental attributes of the tree display. Click the toggle button to collapse or expand the basic control section. Leaf Annotation: Use these controls to assign annotation to the external tree nodes. Click the toggle button to collapse or expand the Leaf Annotation section. Click the plus () and minus () buttons of Leaf Annotation to add or remove annotation tracks. Node Annotation: Use these controls to assign annotation to the internal tree nodes. Click the toggle button to collapse or expand the Node Annotation section. Click the plus () and minus () buttons of Node Annotation to add or remove annotation tracks. 9.2 Inspection The Inspection page allows users to explore the details of the tree structure and topology, as well as view the uploaded annotation files using an interactive online table. Content Box: The Content Box displays the uploaded tree file in its original format. This component provides a convenient way to examine the raw tree data. Plot Box: The Plot Box visually represents the rectangular topology of the tree. Annotation Box: The Annotation Box presents user-uploaded annotation files in a tabular format. The Annotation Box supports pagination and search functionality, enabling users to navigate through large datasets and easily locate specific annotations of interest. Info Box: The Info Box displays information about the nodes. When users perform a selection by dragging the mouse cursor on the Plot Box, the Info Box updates to show details such as node labels, branch lengths, parent’s ID and other additional information associated with the selected nodes. 9.3 Help The help page aims to provide a comprehensive introduction to the key features and workflow of our website. We kindly request that you contact us if you have any inquiries or require assistance. 9.4 Gallery and demo Gallery provides 5 beautiful trees drawn using iPhylo Visual, including: Visualization of metabolic profiles for individual bacterial strains in the gut microbiome Visualization of the genome catalog of diverse bacterial strains from a glacial microbiome dataset Heatmap showing the taxonomy of microbes and their metabolite accumulation/consumption abundance A representative chemical taxonomy tree generated based on chemical InChIKeys and annotated at the superclass, class, and subclass levels A tree of common statistical methods was visualized as an example. You can directly click ‘Try’ to draw and further adjust. "],["data.html", "10 Data 10.1 Import 10.2 Export", " 10 Data 10.1 Import This guide will walk you through the process of preparing your data for annotation. To make the most of our tool, follow these steps: Step 1: Upload Tree File Select and Upload Tree File Click the Browse button on the page. Choose your tree file (typically in Newick, Nexus, PhyloXML, etc., formats). Step 2: Annotation Files (Optional) If you want to add annotations to your tree, you can upload optional Leaf Annotation and Node Annotation files. Leaf Annotation File Prepare a file containing annotations for each leaf of the tree. This file may include information like labels, colors, or other details for individual leaves. Node Annotation File Prepare a file containing annotations for nodes in the tree. This file might include data for internal nodes, helping you provide additional context to your tree. 10.1.1 Tree file Click the Browse button to upload a tree file in the Newick, Nexus, PhyloXML, or Phylip tree formats: Newick Format: Description: Newick, also known as New Hampshire or New Hampshire Extended format, is a simple and widely used text-based format for representing phylogenetic trees. It expresses tree structures using nested parentheses and commas. Example: (A:0.1,B:0.2,(C:0.3,D:0.4):0.5); Usage: It’s commonly used for representing hierarchical relationships in evolutionary biology and bioinformatics. Nexus Format: Description: Nexus is a versatile file format that can store various types of biological data, including phylogenetic trees. It allows the inclusion of metadata, DNA/protein sequences, and more. It is both human-readable and writable. Example: #NEXUS Begin trees; Tree myTree = (A,B,(C,D)); End; Usage: Nexus is often used in phylogenetics, systematics, and evolutionary biology due to its flexibility. PhyloXML: Description: PhyloXML is an XML-based format designed to store and exchange phylogenetic trees and associated data. It supports a variety of information, including node labels, branch lengths, and annotations. Example: &lt;phylogeny&gt; &lt;clade&gt; &lt;name&gt;A&lt;/name&gt; &lt;branch_length&gt;0.1&lt;/branch_length&gt; &lt;/clade&gt; &lt;clade&gt; &lt;name&gt;B&lt;/name&gt; &lt;branch_length&gt;0.2&lt;/branch_length&gt; &lt;/clade&gt; &lt;clade&gt; &lt;name&gt;C&lt;/name&gt; &lt;branch_length&gt;0.3&lt;/branch_length&gt; &lt;/clade&gt; &lt;clade&gt; &lt;name&gt;D&lt;/name&gt; &lt;branch_length&gt;0.4&lt;/branch_length&gt; &lt;/clade&gt; &lt;/phylogeny&gt; Usage: PhyloXML is suitable for storing and sharing complex phylogenetic data, often used in bioinformatics. Phylip Format: Description: The Phylip (PHYLogeny Inference Package) format is a simple, line-based format developed for use with the Phylip software package. It is used to represent both sequence data and phylogenetic trees. Example: 4 A 0.0 0.1 0.2 B 0.1 0.0 0.3 C 0.2 0.3 0.0 D 0.3 0.2 0.1 Usage: Phylip format is commonly used for input and output in phylogenetic analysis software and tools. These formats cater to different needs, from simple tree representations to more complex structures with additional metadata. The choice of format often depends on the specific requirements of the analysis or tool being used. 10.1.2 Leaf annotation Click the Browse button to upload a leaf annotation file with the ,, \\t, or ; separators: When preparing your leaf annotation file, follow these guidelines for proper formatting: Column Names: The first column must be named “id” and corresponds to the identifiers of the leaves in your tree. ID Repetition: IDs can be repeated for multiple annotations. Any ID not matching a leaf in the tree will be ignored. Avoid Reserved Columns: Do not include built-in column names such as “parent,” “node,” “branch.length,” “label,” “isTip,” “x,” “y,” “branch,” and “angle.” Example: Suppose you have a tree with the following leaf IDs: Leaf 1: “A” Leaf 2: “B” Leaf 3: “C” Your leaf annotation file should look like this: id,annotation1,annotation2 A,value1,infoA B,value2,infoB C,value3,infoC A,value4,infoD B,value5,infoE In this example, “id” corresponds to the leaf IDs in your tree, and you can add multiple annotations for each leaf. Columns beyond “id” can be used to provide additional information for each leaf. 10.1.3 Node annotation Click the Browse button to upload a node annotation file with the ,, \\t, or ; separators: When preparing your node annotation file, follow these guidelines for proper formatting: Column Names: The first column must be named “id” and corresponds to the identifiers of the leaves in your tree. ID Repetition: IDs can be repeated for multiple annotations. Any ID not matching a node in the tree will be ignored. Avoid Reserved Columns: Do not include built-in column names such as “parent,” “node,” “branch.length,” “label,” “isTip,” “x,” “y,” “branch,” and “angle.” Example: Suppose you have a tree with the following internal node IDs: Internal Node 1: “N1” Internal Node 2: “N2” Internal Node 3: “N3” Your leaf annotation file should look like this: id,annotationX,annotationY N1,valueX1,valueY1 N2,valueX2,valueY2 N3,valueX3,valueY3 N1,valueX4,valueY4 N2,valueX5,valueY5 In this example, “id” corresponds to the internal node IDs in your tree, and you can add multiple annotations for each node. Columns beyond “id” can be used to provide additional information for each node. Remember, the correct file format and adherence to the mentioned guidelines will ensure successful annotation. 10.1.4 Session To restore your work and retrieve your saved data, you can use the Upload Session component to upload the session file with the “.iphylo” extension. The iPhylo Visual emphasizes the ease of exporting and replicating tree displays using the work session files. The unique exported “.iphylo” files pack all essential data for generating trees with iPhylo. These files are extremely compact, with a size of 30kB for a well-annotated tree of 1000 species. All tree-annotation sessions can be saved to and uploaded from the local computer, enabling the users to fine-tune complex trees while maintaining control over the original data. Moreover, the session files can facilitate cooperative annotation projects. 10.2 Export 10.2.1 Export image iPhylo Visual provides different image export formats for trees, namely, PNG, PDF, and JPEG. 10.2.2 Save session iPhylo Visual offers a session saving feature that allows you to save your work at any point during the annotation process. Simply click the Save Session button to save your data and selected options for the current page. 10.2.3 Download R scripts Importantly, iPhylo Visual’s Export Code feature exports all the raw data and plotting code for the visualized and annotated tree in one click. The package includes the tree file, the annotation table, detailed annotation parameters recorded in a JSON file, and an R script for visualizing the data: By running this script locally (source main.R), users can replicate the tree visualization as seen in iPhylo Visual. Advanced users proficient with R programming can further customize the tree by modifying the code. "],["basic-feature.html", "11 Basic feature 11.1 Tree layout 11.2 Branch color 11.3 Line type 11.4 Branch length 11.5 Branch range", " 11 Basic feature 11.1 Tree layout iPhylo Visual provides various layout options to display the tree in different styles. The available layout options include: circular (by default) inward circular daylight rectangular slanted ellipse roundrect Rotation and Opening: For circular layouts, users can further customize the circular ring opening angle and rotation angle to achieve the desired circular representation. 11.2 Branch color Use the color picker widget to define the color of all tree branches. 11.3 Line type Change the branch line type and width. Line type options are shown below: 11.4 Branch length Without branch length will draw the cladogram of tree: 11.5 Branch range Use branch range to set where the branch start and end relative to the canvas: "],["leaf-annotation-1.html", "12 Leaf annotation 12.1 Tip label 12.2 Tip point 12.3 Heatmap 12.4 Bar plot 12.5 Bubble plot 12.6 Box plot 12.7 Violin plot", " 12 Leaf annotation The “Leaf Annotation” tab manages the annotation tracks for tree leaves, encompassing bars, tiles, boxes, violins, tip points, and tip labels. 12.1 Tip label Specifying the track type of leaf as ‘tip label’ enables showing tip labels: We can also modify the styles of tip labels: Prepare the leaf annotation file: Choose ‘label’ as the column name containing the labels we want to map. Choose ‘color’ as the column name containing the labels we want to map. If the values are continuous, it will draw a gradient of colors. Choose ‘size’ as the continuous variable for the label size. Example data: id value OSQWA2679 0.55 ESRUW9777 0.79 OFAGM8366 1.01 NPJBL9744 0.71 IXMJT4621 0.16 ITXUG9776 0.12 GROKY6004 0.32 QEYPL1702 1.54 KVCTL4245 0.56 JPFRB7291 0.94 RRYFL9967 0.94 XRNWJ1205 0.19 OLXHY4687 1.73 RYWRM7476 0.93 BZPWN4417 1.39 DXYHZ6481 0.53 MMPEW5637 0.82 PCIUJ0473 1.67 GNGZT3233 0.26 CVSCI9337 1.68 Other parameters: Manual color: Allows users to manually specify colors for different categories or values. Manual size: Allows users to manually specify size of points for different values. Offset: Specifies the offset for the plot. Legend: Controls the display of the legend for the plot. Line type: Sets the line type if align is TRUE. Line size: Adjusts the width of the line if align is TRUE. Align: Specifies whether to align all labels. 12.2 Tip point Specifying the track type of leaf as ‘tip point’ enables the drawing of points at tips: Prepare the leaf annotation file: Choose ‘color’ as the column name containing the values we want to map. If the values are continuous, it will draw a gradient of colors. Choose ‘shape’ as the categorical variable (group) for the points. Choose ‘size’ as the continuous variable for the points. Example data: id group value OSQWA2679 A 0.3454520 ESRUW9777 A 1.3195295 OFAGM8366 A 0.5200337 NPJBL9744 A 1.1939274 IXMJT4621 A 1.1706463 ITXUG9776 A 0.6910996 GROKY6004 A 1.0380695 QEYPL1702 A 1.3366934 KVCTL4245 A 0.5482420 JPFRB7291 A 0.3555761 RRYFL9967 B 0.2518943 XRNWJ1205 B 0.5427021 OLXHY4687 B 0.0797344 RYWRM7476 B 2.1533550 BZPWN4417 B 0.3020899 DXYHZ6481 C 1.2910100 MMPEW5637 C 1.8894510 PCIUJ0473 C 0.6348867 GNGZT3233 C 0.8754801 CVSCI9337 C 0.6716307 Other parameters: Manual color: Allows users to manually specify colors for different categories or values. Column order: Determines the order in which columns are displayed in the plot. Manual size: Allows users to manually specify size of points for different values. Offset: Specifies the offset for the plot. Legend: Controls the display of the legend for the plot. Border color: Sets the color of the borders around plot tiles. Border width: Adjusts the width of the borders around plot tiles. Manual shape: Allows users to manually specify shape of points for different categories. Track height: Defines the height of the entire track. Alpha: Sets the transparency level for the plot. Grid: Enables or disables the grid lines in the plot. Axis: Specifies whether to display axes for the plot. Font size: Adjusts the size of the font used for labels. Label angle: Sets the angle of the labels in the plot. Label align: Controls the alignment of labels in the plot (e.g., top, bottom, center). Align: Specifies whether to align all points. 12.3 Heatmap Specifying the track type of leaf as ‘tile’ enables the drawing of a heatmap: Prepare the leaf annotation file: Choose ‘color’ as the column name containing the values we want to map. If the values are categorical, it will draw grouped color blocks. Example data: id group OSQWA2679 A ESRUW9777 A OFAGM8366 A NPJBL9744 A IXMJT4621 A ITXUG9776 A GROKY6004 A QEYPL1702 A KVCTL4245 A JPFRB7291 A RRYFL9967 B XRNWJ1205 B OLXHY4687 B RYWRM7476 B BZPWN4417 B DXYHZ6481 C MMPEW5637 C PCIUJ0473 C GNGZT3233 C CVSCI9337 C If the values are continuous, it will draw a gradient of colors. Choose ‘column’ as the categorical variable (layer) for the heatmap, making it easy to draw multiple columns of heatmaps. Example data: id layer value OSQWA2679 Layer1 0.55 ESRUW9777 Layer1 0.79 OFAGM8366 Layer1 1.01 NPJBL9744 Layer1 0.71 IXMJT4621 Layer1 0.16 ITXUG9776 Layer1 0.12 GROKY6004 Layer1 0.32 QEYPL1702 Layer1 1.54 KVCTL4245 Layer1 0.56 JPFRB7291 Layer1 0.94 RRYFL9967 Layer1 0.94 XRNWJ1205 Layer1 0.19 OLXHY4687 Layer1 1.73 RYWRM7476 Layer1 0.93 BZPWN4417 Layer1 1.39 DXYHZ6481 Layer1 0.53 MMPEW5637 Layer1 0.82 PCIUJ0473 Layer1 1.67 GNGZT3233 Layer1 0.26 CVSCI9337 Layer1 1.68 OSQWA2679 Layer2 1.32 ESRUW9777 Layer2 1.37 OFAGM8366 Layer2 0.36 NPJBL9744 Layer2 0.61 IXMJT4621 Layer2 0.49 ITXUG9776 Layer2 0.18 GROKY6004 Layer2 0.27 QEYPL1702 Layer2 0.49 KVCTL4245 Layer2 0.16 JPFRB7291 Layer2 0.65 RRYFL9967 Layer2 1.16 XRNWJ1205 Layer2 0.59 OLXHY4687 Layer2 0.17 RYWRM7476 Layer2 0.62 BZPWN4417 Layer2 0.02 DXYHZ6481 Layer2 1.35 MMPEW5637 Layer2 0.22 PCIUJ0473 Layer2 1.43 GNGZT3233 Layer2 1.80 CVSCI9337 Layer2 1.83 OSQWA2679 Layer3 0.71 ESRUW9777 Layer3 1.83 OFAGM8366 Layer3 0.76 NPJBL9744 Layer3 0.80 IXMJT4621 Layer3 0.53 ITXUG9776 Layer3 0.94 GROKY6004 Layer3 0.40 QEYPL1702 Layer3 0.77 KVCTL4245 Layer3 0.03 JPFRB7291 Layer3 0.81 RRYFL9967 Layer3 0.17 XRNWJ1205 Layer3 1.36 OLXHY4687 Layer3 0.61 RYWRM7476 Layer3 1.27 BZPWN4417 Layer3 2.23 DXYHZ6481 Layer3 0.23 MMPEW5637 Layer3 1.14 PCIUJ0473 Layer3 0.09 GNGZT3233 Layer3 1.22 CVSCI9337 Layer3 0.08 Other parameters: Manual color: Allows users to manually specify colors for different categories or values. Column order: Determines the order in which columns are displayed in the heatmap. Offset: Specifies the offset for the heatmap. Legend: Controls the display of the legend for the heatmap. Border color: Sets the color of the borders around heatmap tiles. Border width: Adjusts the width of the borders around heatmap tiles. Track height: Defines the height of the entire track. Alpha: Sets the transparency level for the heatmap tiles. Grid: Enables or disables the grid lines in the heatmap. Axis: Specifies whether to display axes for the heatmap. Font size: Adjusts the size of the font used for labels. Label angle: Sets the angle of the labels in the heatmap. Label align: Controls the alignment of labels in the heatmap (e.g., top, bottom, center). 12.4 Bar plot Specifying the track type of leaf as ‘bar’ enables the drawing of a bar plot: Prepare the leaf annotation file: Choose ‘color’ as the column name containing the values we want to map. If the values are categorical, it will draw grouped color blocks. If the values are continuous, it will draw a gradient of colors. Choose ‘column’ as the continuous variable (value) for the bar plot, it will be the y-axis value of each leaf. Example data: id group value OSQWA2679 A 0.3454520 ESRUW9777 A 1.3195295 OFAGM8366 A 0.5200337 NPJBL9744 A 1.1939274 IXMJT4621 A 1.1706463 ITXUG9776 A 0.6910996 GROKY6004 A 1.0380695 QEYPL1702 A 1.3366934 KVCTL4245 A 0.5482420 JPFRB7291 A 0.3555761 RRYFL9967 B 0.2518943 XRNWJ1205 B 0.5427021 OLXHY4687 B 0.0797344 RYWRM7476 B 2.1533550 BZPWN4417 B 0.3020899 DXYHZ6481 C 1.2910100 MMPEW5637 C 1.8894510 PCIUJ0473 C 0.6348867 GNGZT3233 C 0.8754801 CVSCI9337 C 0.6716307 Other parameters: Manual color: Allows users to manually specify colors for different categories or values. Column order: Determines the order in which columns are displayed in the plot. Offset: Specifies the offset for the plot. Legend: Controls the display of the legend for the plot. Border color: Sets the color of the borders around plot tiles. Border width: Adjusts the width of the borders around plot tiles. Track height: Defines the height of the entire track. Alpha: Sets the transparency level for the plot. Grid: Enables or disables the grid lines in the plot. Axis: Specifies whether to display axes for the plot. Font size: Adjusts the size of the font used for labels. Label angle: Sets the angle of the labels in the plot. Label align: Controls the alignment of labels in the plot (e.g., top, bottom, center). 12.5 Bubble plot Specifying the track type of leaf as ‘tip point’ enables the drawing of a bubble plot: Prepare the leaf annotation file: Choose ‘color’ as the column name containing the values we want to map. If the values are continuous, it will draw a gradient of colors. Choose ‘column’ as the categorical variable (layer) for the bubble plot, making it easy to draw multiple columns of bubble plot. Choose ‘column’ as the categorical variable (layer) for the bubble plot, making it easy to draw multiple columns of bubble plot. Choose ‘size’ as the continuous variable for the bubble plot. Example data: id layer value OSQWA2679 Layer1 0.55 ESRUW9777 Layer1 0.79 OFAGM8366 Layer1 1.01 NPJBL9744 Layer1 0.71 IXMJT4621 Layer1 0.16 ITXUG9776 Layer1 0.12 GROKY6004 Layer1 0.32 QEYPL1702 Layer1 1.54 KVCTL4245 Layer1 0.56 JPFRB7291 Layer1 0.94 RRYFL9967 Layer1 0.94 XRNWJ1205 Layer1 0.19 OLXHY4687 Layer1 1.73 RYWRM7476 Layer1 0.93 BZPWN4417 Layer1 1.39 DXYHZ6481 Layer1 0.53 MMPEW5637 Layer1 0.82 PCIUJ0473 Layer1 1.67 GNGZT3233 Layer1 0.26 CVSCI9337 Layer1 1.68 OSQWA2679 Layer2 1.32 ESRUW9777 Layer2 1.37 OFAGM8366 Layer2 0.36 NPJBL9744 Layer2 0.61 IXMJT4621 Layer2 0.49 ITXUG9776 Layer2 0.18 GROKY6004 Layer2 0.27 QEYPL1702 Layer2 0.49 KVCTL4245 Layer2 0.16 JPFRB7291 Layer2 0.65 RRYFL9967 Layer2 1.16 XRNWJ1205 Layer2 0.59 OLXHY4687 Layer2 0.17 RYWRM7476 Layer2 0.62 BZPWN4417 Layer2 0.02 DXYHZ6481 Layer2 1.35 MMPEW5637 Layer2 0.22 PCIUJ0473 Layer2 1.43 GNGZT3233 Layer2 1.80 CVSCI9337 Layer2 1.83 OSQWA2679 Layer3 0.71 ESRUW9777 Layer3 1.83 OFAGM8366 Layer3 0.76 NPJBL9744 Layer3 0.80 IXMJT4621 Layer3 0.53 ITXUG9776 Layer3 0.94 GROKY6004 Layer3 0.40 QEYPL1702 Layer3 0.77 KVCTL4245 Layer3 0.03 JPFRB7291 Layer3 0.81 RRYFL9967 Layer3 0.17 XRNWJ1205 Layer3 1.36 OLXHY4687 Layer3 0.61 RYWRM7476 Layer3 1.27 BZPWN4417 Layer3 2.23 DXYHZ6481 Layer3 0.23 MMPEW5637 Layer3 1.14 PCIUJ0473 Layer3 0.09 GNGZT3233 Layer3 1.22 CVSCI9337 Layer3 0.08 Other parameters: Manual color: Allows users to manually specify colors for different categories or values. Column order: Determines the order in which columns are displayed in the plot. Manual size: Allows users to manually specify size of points for different values. Offset: Specifies the offset for the plot. Legend: Controls the display of the legend for the plot. Border color: Sets the color of the borders around plot tiles. Border width: Adjusts the width of the borders around plot tiles. Shape: Allows users to mapping shape of points. Manual shape: Allows users to manually specify shape of points for different categories. Track height: Defines the height of the entire track. Alpha: Sets the transparency level for the plot. Grid: Enables or disables the grid lines in the plot. Axis: Specifies whether to display axes for the plot. Font size: Adjusts the size of the font used for labels. Label angle: Sets the angle of the labels in the plot. Label align: Controls the alignment of labels in the plot (e.g., top, bottom, center). Align: Specifies whether to align all points. 12.6 Box plot Specifying the track type of leaf as ‘box’ enables the drawing of a box plot: Prepare the leaf annotation file: Choose ‘column’ as the continuous variable (value) for the box plot, it will be the y-axis value of each leaf. Example data: id value OSQWA2679 1.7139226 ESRUW9777 0.1692439 OFAGM8366 0.7890045 NPJBL9744 0.1380269 IXMJT4621 2.5331384 ITXUG9776 0.1402700 GROKY6004 0.0877751 QEYPL1702 0.3324896 KVCTL4245 0.4958188 JPFRB7291 1.6763859 RRYFL9967 0.7254029 XRNWJ1205 0.8223092 OLXHY4687 0.5365051 RYWRM7476 0.1955164 BZPWN4417 1.6762909 DXYHZ6481 0.0495314 MMPEW5637 0.0134147 PCIUJ0473 0.8426530 GNGZT3233 1.0146761 CVSCI9337 0.1381128 OSQWA2679 1.1391237 ESRUW9777 0.6916754 OFAGM8366 3.4170925 NPJBL9744 0.3702410 IXMJT4621 0.6876392 ITXUG9776 0.3520154 GROKY6004 1.0738444 QEYPL1702 1.2603112 KVCTL4245 0.4417195 JPFRB7291 0.0543929 RRYFL9967 1.3202823 XRNWJ1205 1.2026172 OLXHY4687 0.2408666 RYWRM7476 0.5810605 BZPWN4417 0.3973637 DXYHZ6481 1.1037415 MMPEW5637 0.2369583 PCIUJ0473 1.2722285 GNGZT3233 1.0196708 CVSCI9337 1.5938927 OSQWA2679 0.4049199 ESRUW9777 0.0034813 OFAGM8366 0.4912153 NPJBL9744 0.8548826 IXMJT4621 2.2421701 ITXUG9776 1.2994069 GROKY6004 0.8203667 QEYPL1702 1.0513009 KVCTL4245 0.2231083 JPFRB7291 0.3680792 RRYFL9967 0.0249564 XRNWJ1205 1.5978399 OLXHY4687 0.3452257 RYWRM7476 1.4500343 BZPWN4417 0.2521606 DXYHZ6481 1.8992152 MMPEW5637 0.0139672 PCIUJ0473 0.3236669 GNGZT3233 0.0316505 CVSCI9337 0.1521737 OSQWA2679 1.8386026 ESRUW9777 0.3293844 OFAGM8366 0.8225729 NPJBL9744 1.3337066 IXMJT4621 1.4325406 ITXUG9776 0.4031323 GROKY6004 0.0139731 QEYPL1702 1.1990303 KVCTL4245 0.7451819 JPFRB7291 1.4913384 RRYFL9967 0.8062194 XRNWJ1205 0.8239946 OLXHY4687 1.5079721 RYWRM7476 1.0203457 BZPWN4417 0.6194179 DXYHZ6481 2.0465736 MMPEW5637 0.8001764 PCIUJ0473 0.0208043 GNGZT3233 0.5763465 CVSCI9337 1.1345368 OSQWA2679 0.8864298 ESRUW9777 0.0402544 OFAGM8366 2.0405460 NPJBL9744 0.3900764 IXMJT4621 0.5319518 ITXUG9776 0.6353661 GROKY6004 0.1376743 QEYPL1702 0.1912515 KVCTL4245 0.3128723 JPFRB7291 0.3461296 RRYFL9967 1.9989839 XRNWJ1205 1.0400758 OLXHY4687 0.5526598 RYWRM7476 1.5144789 BZPWN4417 0.3811676 DXYHZ6481 1.1819449 MMPEW5637 0.2991659 PCIUJ0473 0.7365343 GNGZT3233 1.0422128 CVSCI9337 0.1700525 OSQWA2679 0.1747209 ESRUW9777 1.4388000 OFAGM8366 0.8022827 NPJBL9744 1.2308044 IXMJT4621 0.5257156 ITXUG9776 1.0239022 GROKY6004 0.9037053 QEYPL1702 1.3148140 KVCTL4245 1.6196226 JPFRB7291 0.7776291 RRYFL9967 0.3716507 XRNWJ1205 2.3177442 OLXHY4687 0.3851916 RYWRM7476 0.1991026 BZPWN4417 0.1176758 DXYHZ6481 0.4453197 MMPEW5637 1.0093290 PCIUJ0473 0.5976304 GNGZT3233 0.4727152 CVSCI9337 0.0003796 OSQWA2679 1.1199306 ESRUW9777 1.3958571 OFAGM8366 0.7234590 NPJBL9744 0.4626633 IXMJT4621 0.9788236 ITXUG9776 1.5865962 GROKY6004 1.4471481 QEYPL1702 1.0109909 KVCTL4245 2.1631712 JPFRB7291 0.3460799 RRYFL9967 0.7885243 XRNWJ1205 0.8841424 OLXHY4687 0.6062781 RYWRM7476 0.1444490 BZPWN4417 2.1969155 DXYHZ6481 0.9013570 MMPEW5637 1.3755314 PCIUJ0473 0.5871956 GNGZT3233 1.2236890 CVSCI9337 0.1966324 OSQWA2679 1.1804610 ESRUW9777 0.6567064 OFAGM8366 0.3153820 NPJBL9744 2.6317379 IXMJT4621 0.5318544 ITXUG9776 0.5783791 GROKY6004 0.9792216 QEYPL1702 0.6389339 KVCTL4245 2.0289271 JPFRB7291 0.7357921 RRYFL9967 0.0724318 XRNWJ1205 0.2830424 OLXHY4687 0.0475461 RYWRM7476 0.5188582 BZPWN4417 1.1795441 DXYHZ6481 0.2921048 MMPEW5637 0.7915654 PCIUJ0473 0.1252748 GNGZT3233 0.4395111 CVSCI9337 1.0279077 OSQWA2679 0.2523669 ESRUW9777 0.0228920 OFAGM8366 0.7660293 NPJBL9744 0.4806514 IXMJT4621 1.4311540 ITXUG9776 0.5941172 GROKY6004 1.0895659 QEYPL1702 2.0600244 KVCTL4245 1.5102025 JPFRB7291 0.4385944 RRYFL9967 1.0164413 XRNWJ1205 1.4155280 OLXHY4687 0.8617560 RYWRM7476 0.7761275 BZPWN4417 1.3001602 DXYHZ6481 0.4010517 MMPEW5637 0.2601128 PCIUJ0473 0.1800129 GNGZT3233 0.6271655 CVSCI9337 1.5569636 OSQWA2679 1.1516524 ESRUW9777 0.6992130 OFAGM8366 1.9920143 NPJBL9744 0.3106052 IXMJT4621 0.4364596 ITXUG9776 2.4271736 GROKY6004 0.3010645 QEYPL1702 1.1296851 KVCTL4245 1.1725890 JPFRB7291 1.4492794 RRYFL9967 0.3099543 XRNWJ1205 0.8783183 OLXHY4687 0.5560619 RYWRM7476 1.1508815 BZPWN4417 0.4008188 DXYHZ6481 0.3066845 MMPEW5637 0.1228437 PCIUJ0473 0.3823029 GNGZT3233 0.0567727 CVSCI9337 0.6852805 Other parameters: Manual color: Allows users to manually specify colors for different categories or values. Column order: Determines the order in which columns are displayed in the plot. Offset: Specifies the offset for the plot. Legend: Controls the display of the legend for the plot. Border color: Sets the color of the borders around plot tiles. Border width: Adjusts the width of the borders around plot tiles. Track height: Defines the height of the entire track. Alpha: Sets the transparency level for the plot. Grid: Enables or disables the grid lines in the plot. Axis: Specifies whether to display axes for the plot. Font size: Adjusts the size of the font used for labels. Label angle: Sets the angle of the labels in the plot. Label align: Controls the alignment of labels in the plot (e.g., top, bottom, center). 12.7 Violin plot Specifying the track type of leaf as ‘violin’ enables the drawing of a violin plot: Prepare the leaf annotation file: Choose ‘column’ as the continuous variable (value) for the violin plot, it will be the y-axis value of each leaf. Example data: id value OSQWA2679 1.7139226 ESRUW9777 0.1692439 OFAGM8366 0.7890045 NPJBL9744 0.1380269 IXMJT4621 2.5331384 ITXUG9776 0.1402700 GROKY6004 0.0877751 QEYPL1702 0.3324896 KVCTL4245 0.4958188 JPFRB7291 1.6763859 RRYFL9967 0.7254029 XRNWJ1205 0.8223092 OLXHY4687 0.5365051 RYWRM7476 0.1955164 BZPWN4417 1.6762909 DXYHZ6481 0.0495314 MMPEW5637 0.0134147 PCIUJ0473 0.8426530 GNGZT3233 1.0146761 CVSCI9337 0.1381128 OSQWA2679 1.1391237 ESRUW9777 0.6916754 OFAGM8366 3.4170925 NPJBL9744 0.3702410 IXMJT4621 0.6876392 ITXUG9776 0.3520154 GROKY6004 1.0738444 QEYPL1702 1.2603112 KVCTL4245 0.4417195 JPFRB7291 0.0543929 RRYFL9967 1.3202823 XRNWJ1205 1.2026172 OLXHY4687 0.2408666 RYWRM7476 0.5810605 BZPWN4417 0.3973637 DXYHZ6481 1.1037415 MMPEW5637 0.2369583 PCIUJ0473 1.2722285 GNGZT3233 1.0196708 CVSCI9337 1.5938927 OSQWA2679 0.4049199 ESRUW9777 0.0034813 OFAGM8366 0.4912153 NPJBL9744 0.8548826 IXMJT4621 2.2421701 ITXUG9776 1.2994069 GROKY6004 0.8203667 QEYPL1702 1.0513009 KVCTL4245 0.2231083 JPFRB7291 0.3680792 RRYFL9967 0.0249564 XRNWJ1205 1.5978399 OLXHY4687 0.3452257 RYWRM7476 1.4500343 BZPWN4417 0.2521606 DXYHZ6481 1.8992152 MMPEW5637 0.0139672 PCIUJ0473 0.3236669 GNGZT3233 0.0316505 CVSCI9337 0.1521737 OSQWA2679 1.8386026 ESRUW9777 0.3293844 OFAGM8366 0.8225729 NPJBL9744 1.3337066 IXMJT4621 1.4325406 ITXUG9776 0.4031323 GROKY6004 0.0139731 QEYPL1702 1.1990303 KVCTL4245 0.7451819 JPFRB7291 1.4913384 RRYFL9967 0.8062194 XRNWJ1205 0.8239946 OLXHY4687 1.5079721 RYWRM7476 1.0203457 BZPWN4417 0.6194179 DXYHZ6481 2.0465736 MMPEW5637 0.8001764 PCIUJ0473 0.0208043 GNGZT3233 0.5763465 CVSCI9337 1.1345368 OSQWA2679 0.8864298 ESRUW9777 0.0402544 OFAGM8366 2.0405460 NPJBL9744 0.3900764 IXMJT4621 0.5319518 ITXUG9776 0.6353661 GROKY6004 0.1376743 QEYPL1702 0.1912515 KVCTL4245 0.3128723 JPFRB7291 0.3461296 RRYFL9967 1.9989839 XRNWJ1205 1.0400758 OLXHY4687 0.5526598 RYWRM7476 1.5144789 BZPWN4417 0.3811676 DXYHZ6481 1.1819449 MMPEW5637 0.2991659 PCIUJ0473 0.7365343 GNGZT3233 1.0422128 CVSCI9337 0.1700525 OSQWA2679 0.1747209 ESRUW9777 1.4388000 OFAGM8366 0.8022827 NPJBL9744 1.2308044 IXMJT4621 0.5257156 ITXUG9776 1.0239022 GROKY6004 0.9037053 QEYPL1702 1.3148140 KVCTL4245 1.6196226 JPFRB7291 0.7776291 RRYFL9967 0.3716507 XRNWJ1205 2.3177442 OLXHY4687 0.3851916 RYWRM7476 0.1991026 BZPWN4417 0.1176758 DXYHZ6481 0.4453197 MMPEW5637 1.0093290 PCIUJ0473 0.5976304 GNGZT3233 0.4727152 CVSCI9337 0.0003796 OSQWA2679 1.1199306 ESRUW9777 1.3958571 OFAGM8366 0.7234590 NPJBL9744 0.4626633 IXMJT4621 0.9788236 ITXUG9776 1.5865962 GROKY6004 1.4471481 QEYPL1702 1.0109909 KVCTL4245 2.1631712 JPFRB7291 0.3460799 RRYFL9967 0.7885243 XRNWJ1205 0.8841424 OLXHY4687 0.6062781 RYWRM7476 0.1444490 BZPWN4417 2.1969155 DXYHZ6481 0.9013570 MMPEW5637 1.3755314 PCIUJ0473 0.5871956 GNGZT3233 1.2236890 CVSCI9337 0.1966324 OSQWA2679 1.1804610 ESRUW9777 0.6567064 OFAGM8366 0.3153820 NPJBL9744 2.6317379 IXMJT4621 0.5318544 ITXUG9776 0.5783791 GROKY6004 0.9792216 QEYPL1702 0.6389339 KVCTL4245 2.0289271 JPFRB7291 0.7357921 RRYFL9967 0.0724318 XRNWJ1205 0.2830424 OLXHY4687 0.0475461 RYWRM7476 0.5188582 BZPWN4417 1.1795441 DXYHZ6481 0.2921048 MMPEW5637 0.7915654 PCIUJ0473 0.1252748 GNGZT3233 0.4395111 CVSCI9337 1.0279077 OSQWA2679 0.2523669 ESRUW9777 0.0228920 OFAGM8366 0.7660293 NPJBL9744 0.4806514 IXMJT4621 1.4311540 ITXUG9776 0.5941172 GROKY6004 1.0895659 QEYPL1702 2.0600244 KVCTL4245 1.5102025 JPFRB7291 0.4385944 RRYFL9967 1.0164413 XRNWJ1205 1.4155280 OLXHY4687 0.8617560 RYWRM7476 0.7761275 BZPWN4417 1.3001602 DXYHZ6481 0.4010517 MMPEW5637 0.2601128 PCIUJ0473 0.1800129 GNGZT3233 0.6271655 CVSCI9337 1.5569636 OSQWA2679 1.1516524 ESRUW9777 0.6992130 OFAGM8366 1.9920143 NPJBL9744 0.3106052 IXMJT4621 0.4364596 ITXUG9776 2.4271736 GROKY6004 0.3010645 QEYPL1702 1.1296851 KVCTL4245 1.1725890 JPFRB7291 1.4492794 RRYFL9967 0.3099543 XRNWJ1205 0.8783183 OLXHY4687 0.5560619 RYWRM7476 1.1508815 BZPWN4417 0.4008188 DXYHZ6481 0.3066845 MMPEW5637 0.1228437 PCIUJ0473 0.3823029 GNGZT3233 0.0567727 CVSCI9337 0.6852805 Other parameters: Manual color: Allows users to manually specify colors for different categories or values. Column order: Determines the order in which columns are displayed in the plot. Offset: Specifies the offset for the plot. Legend: Controls the display of the legend for the plot. Border color: Sets the color of the borders around plot tiles. Border width: Adjusts the width of the borders around plot tiles. Track height: Defines the height of the entire track. Alpha: Sets the transparency level for the plot. Grid: Enables or disables the grid lines in the plot. Axis: Specifies whether to display axes for the plot. Font size: Adjusts the size of the font used for labels. Label angle: Sets the angle of the labels in the plot. Label align: Controls the alignment of labels in the plot (e.g., top, bottom, center). "],["node-annotation-1.html", "13 Node annotation 13.1 Node label 13.2 Color branch 13.3 Highlight 13.4 Strip", " 13 Node annotation The “Node Annotation” tab handles annotation tracks related to internal nodes and branches, including strips, clade branch colors, clade backgrounds, and node labels. 13.1 Node label Specifying the track type of node as ‘node label’ enables showing node labels: Prepare the node annotation file: Choose ‘label’ as the column name containing the labels we want to map. Choose ‘color’ as the column name containing the values we want to map. If the values are continuous, it will draw a gradient of colors. Choose ‘size’ as the continuous variable for the label size. Choose ‘background’ as the column name containing the values we want to map. If the values are continuous, it will draw a gradient of colors. Example data: id clade 22 Clade1 32 Clade2 Other parameters: Manual color: Allows users to manually specify colors for different categories or values. Manual size: Allows users to manually specify size of points for different values. Offset x: Specifies the offset for the labels at x-axis. Offset y: Specifies the offset for the labels at y-axis. Alpha: Sets the transparency level for the plot. Label display: Sets the direction of node labels (rotating or horizontal?). Border: Specifies whether to plot the border. Legend: Controls the display of the legend for the plot. 13.2 Color branch Specifying the track type of node as ‘color branch’ enables the coloring branch of a tree plot: Prepare the node annotation file: Choose ‘color’ as the variable (clade) for coloring branch. Example data: id clade 22 Clade1 32 Clade2 Other parameters: Manual color: Allows users to manually specify colors for different categories or values. Legend: Controls the display of the legend for the plot. 13.3 Highlight Specifying the track type of node as ‘highlight’ enables the highlighting of a tree plot: Prepare the node annotation file: Choose ‘color’ as the variable (clade) for highlighting branch. Example data: id clade 22 Clade1 32 Clade2 Other parameters: Manual color: Allows users to manually specify colors for different categories or values. Legend: Controls the display of the legend for the plot. Border color: Sets the color of the borders around plot tiles. Border width: Adjusts the width of the borders around plot tiles. Alpha: Sets the transparency level for the plot. To bottom: Control the highlighting to the bottom of the plot. 13.4 Strip Specifying the track type of node as ‘strip’ enables the drawing of strips of a tree plot: Prepare the node annotation file: Choose ‘color’ as the variable (clade) for drawing strips. Example data: id clade 22 Clade1 32 Clade2 Other parameters: Manual color: Allows users to manually specify colors for different categories or values. Offset: Specifies the offset for the plot. Legend: Controls the display of the legend for the plot. Alpha: Sets the transparency level for the plot. Font size: Adjusts the size of the font used for labels. Label offset: Sets the offset of the labels in the plot. "],["canvas-and-legend.html", "14 Canvas and Legend", " 14 Canvas and Legend Canvas Width: Description: Determines the width of the entire canvas or plotting area where the visualization will be displayed. Usage: Adjust this parameter to control the horizontal size of the entire visualization canvas. Canvas Height: Description: Specifies the height of the canvas or plotting area. Usage: Use this parameter to control the vertical size of the entire visualization canvas. Legend X Position: Description: Sets the horizontal position of the legend within the canvas. Usage: Adjust this parameter to move the legend horizontally, helping to optimize its placement. Legend Y Position: Description: Determines the vertical position of the legend within the canvas. Usage: Use this parameter to control the vertical placement of the legend in relation to the canvas. Legend Scale: Description: Defines the scale or size of the legend. Usage: Adjust this parameter to control the overall size of the legend, making it more prominent or compact. Legend Direction: Description: Specifies the orientation or direction of the legend, whether it is horizontal or vertical. Usage: Use this parameter to choose the orientation that best fits your visualization layout. These parameters provide control over the overall canvas dimensions, legend placement, size, and orientation, allowing users to customize the appearance of their visualizations to suit their needs. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
