[{"path":"index.html","id":"welcome","chapter":"Welcome","heading":"Welcome","text":"","code":""},{"path":"index.html","id":"install","chapter":"Welcome","heading":"Install","text":"MetaNet comprehensive network analysis package, especially various biological omics.latest development version can found https://github.com/Asa12138/MetaNet.data manipulation, recommend use dplyr. functions MetaNet dependent pcutils, also need install.","code":"\nremotes::install_github('Asa12138/pcutils')\nremotes::install_github('Asa12138/MetaNet',dependencies=T)\nlibrary(MetaNet)\nlibrary(igraph)\n\n#========data manipulation\nlibrary(dplyr)\nlibrary(pcutils)\nsessionInfo()\n#> R version 4.2.2 (2022-10-31)\n#> Platform: aarch64-apple-darwin20 (64-bit)\n#> Running under: macOS Ventura 13.0.1\n#> \n#> Matrix products: default\n#> BLAS:   /Library/Frameworks/R.framework/Versions/4.2-arm64/Resources/lib/libRblas.0.dylib\n#> LAPACK: /Library/Frameworks/R.framework/Versions/4.2-arm64/Resources/lib/libRlapack.dylib\n#> \n#> locale:\n#> [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n#> \n#> attached base packages:\n#> [1] stats     graphics  grDevices utils     datasets \n#> [6] methods   base     \n#> \n#> other attached packages:\n#> [1] pcutils_0.1.1 dplyr_1.1.2   igraph_1.3.5  MetaNet_0.1.0\n#> \n#> loaded via a namespace (and not attached):\n#>  [1] Rcpp_1.0.10      plyr_1.8.8       bslib_0.4.2     \n#>  [4] compiler_4.2.2   pillar_1.9.0     jquerylib_0.1.4 \n#>  [7] tools_4.2.2      digest_0.6.31    downlit_0.4.2   \n#> [10] jsonlite_1.8.4   evaluate_0.19    memoise_2.0.1   \n#> [13] lifecycle_1.0.3  tibble_3.2.1     gtable_0.3.3    \n#> [16] pkgconfig_2.0.3  rlang_1.1.1      cli_3.6.1       \n#> [19] rstudioapi_0.14  yaml_2.3.6       xfun_0.36       \n#> [22] fastmap_1.1.0    stringr_1.5.0    withr_2.5.0     \n#> [25] xml2_1.3.3       knitr_1.42.3     generics_0.1.3  \n#> [28] fs_1.5.2         sass_0.4.4       vctrs_0.6.2     \n#> [31] tidyselect_1.2.0 grid_4.2.2       glue_1.6.2      \n#> [34] R6_2.5.1         fansi_1.0.4      rmarkdown_2.19  \n#> [37] bookdown_0.32    reshape2_1.4.4   ggplot2_3.4.2   \n#> [40] magrittr_2.0.3   scales_1.2.1     htmltools_0.5.4 \n#> [43] colorspace_2.1-0 utf8_1.2.3       stringi_1.7.8   \n#> [46] munsell_0.5.0    cachem_1.0.6"},{"path":"index.html","id":"citation","chapter":"Welcome","heading":"Citation","text":"Please cite:Chen P (2023). MetaNet: Network analysis multi-omics. R package, https://github.com/Asa12138/MetaNet.","code":""},{"path":"introduction.html","id":"introduction","chapter":"1 Introduction","heading":"1 Introduction","text":"","code":""},{"path":"introduction.html","id":"network","chapter":"1 Introduction","heading":"1.1 Network","text":"mathematics,“networks” often referred “graphs”,mathematical field graph\nresearch called “graph theory”.basic elements network graph nodes edges. constructing network graph,\nobjects called “nodes” (vertices nodes),usually drawn points; connections\nnodes called “edges” (edges). links),usually drawn lines \npoints.Can divide directed undirected networks, weighted unweighted networks according edges.","code":""},{"path":"introduction.html","id":"network-in-omics","chapter":"1 Introduction","heading":"1.2 Network in omics","text":"Networks can represent various systems real world,many applications biological\nresearch,especially systems biology: gene expression regulatory networks,metabolic\nnetworks,ecosystem space networks,microbial co-occurrence networks,protein interaction networks,etc (Figure 1.1).\nFigure 1.1: Applications network biology\nWGCNACo-occurrence networksPPI","code":""},{"path":"introduction.html","id":"software","chapter":"1 Introduction","heading":"1.3 Software","text":"R: igraph (https://igraph.org/), networkR: igraph (https://igraph.org/), networkPython: networkx (https://pypi.org/project/networkx/ )Python: networkx (https://pypi.org/project/networkx/ )Pajek (http://vlado.fmf.uni-lj.si/pub/networks/pajek/ )Pajek (http://vlado.fmf.uni-lj.si/pub/networks/pajek/ )Cytoscape (https://cytoscape.org/ )Cytoscape (https://cytoscape.org/ )Gephi (https://gephi.org/ )Gephi (https://gephi.org/ )","code":""},{"path":"introduction.html","id":"metanet","chapter":"1 Introduction","heading":"1.4 MetaNet","text":"MetaNet comprehensive network analysis package omics data.Calculate correlation network quickly, accelerate lots analysis parallel computing.Calculate correlation network quickly, accelerate lots analysis parallel computing.Support multi-omics data, search sub-nets fluently.Support multi-omics data, search sub-nets fluently.Handle bigger data, 10,000 nodes omics.Handle bigger data, 10,000 nodes omics.Offer various layout method multi-omics network interfaces software\n(Gephi, Cytoscape, ggplot), easy visualize.Offer various layout method multi-omics network interfaces software\n(Gephi, Cytoscape, ggplot), easy visualize.Provide comprehensive topology indexes calculation，including ecological network stability.Provide comprehensive topology indexes calculation，including ecological network stability.","code":""},{"path":"construction.html","id":"construction","chapter":"2 Construction","heading":"2 Construction","text":"","code":""},{"path":"construction.html","id":"normalization","chapter":"2 Construction","heading":"2.1 Pre-processing","text":"trans() function contains many normalization methods, suitable pre-processing different omics, refer vegan::decostand() (1).Table 2.1:  Normalization methods used omics.Additive log ratio (“alr”) transformation (Aitchison 1986) reduces data skewness compositionality bias.\\(alr=[log\\frac{x_1}{x_D},…,log\\frac{x_{D-1}}{x_D}]\\)centered log ratio (“clr”) transformation proposed Aitchison (1986) reduces data skewness compositionality bias.\\(clr=log\\frac{x_r}{g(x_r)}\\)robust clr (“rclr”) similar regular clr (see ) allows data contains zeroes.\\(rclr=log\\frac{x_r}{g(x_r>0)}\\)guolv() hebing() functions can help filter aggregate omics data.","code":"\nlibrary(MetaNet)\ndata(otutab,package = \"pcutils\")\n#trans(otutab,method=\"cpm\")%>%head()\ntrans(otutab,method=\"log1\")%>%head(4)\n#>                                   NS1      NS2      NS3\n#> s__un_f__Thermomonosporaceae 6.996681 7.560601 6.698268\n#> s__Pelomonas_puraquae        7.582229 7.118826 7.767687\n#> s__Rhizobacter_bergeniae     6.378426 6.129050 6.791221\n#> s__Flavobacterium_terrae     5.501258 5.459586 7.501634\n#>                                   NS4      NS5      NS6\n#> s__un_f__Thermomonosporaceae 7.211557 6.970730 6.976348\n#> s__Pelomonas_puraquae        7.712891 7.973844 7.512071\n#> s__Rhizobacter_bergeniae     6.804615 7.112327 6.749931\n#> s__Flavobacterium_terrae     6.513230 7.276556 6.198479\n#>                                   WS1      WS2      WS3\n#> s__un_f__Thermomonosporaceae 7.133296 7.376508 7.193686\n#> s__Pelomonas_puraquae        6.469250 6.206576 7.115582\n#> s__Rhizobacter_bergeniae     6.405228 6.154858 6.976348\n#> s__Flavobacterium_terrae     5.765191 7.563720 7.309212\n#>                                   WS4      WS5      WS6\n#> s__un_f__Thermomonosporaceae 6.848005 7.118016 6.919684\n#> s__Pelomonas_puraquae        7.158514 6.860664 6.455199\n#> s__Rhizobacter_bergeniae     6.936343 6.741701 6.508769\n#> s__Flavobacterium_terrae     6.903747 6.359574 5.886104\n#>                                   CS1      CS2      CS3\n#> s__un_f__Thermomonosporaceae 7.746733 7.831617 7.444249\n#> s__Pelomonas_puraquae        7.174724 7.324490 6.739337\n#> s__Rhizobacter_bergeniae     6.937314 7.497207 6.910751\n#> s__Flavobacterium_terrae     6.985642 7.105786 6.626718\n#>                                   CS4      CS5      CS6\n#> s__un_f__Thermomonosporaceae 7.588830 7.266827 7.331715\n#> s__Pelomonas_puraquae        7.029088 7.302496 7.069023\n#> s__Rhizobacter_bergeniae     7.090910 7.085901 6.637258\n#> s__Flavobacterium_terrae     6.049733 6.940222 7.253470"},{"path":"construction.html","id":"pairwise-relationship","chapter":"2 Construction","heading":"2.2 Pairwise relationship","text":"determine pairwise relationship, experimental data generally relatively rare, mainly relying statistical inference.present, mainly two ways, first one based similarity correlation (2). example: Spearman, Pearson, Bray-Curtis… based abundance incidence data, similarity matrix paired species can calculated, randomized data can used repeatedly calculate significance.Finally, meaningful similarities retained network.second way networks based regression. Divide species source target, use multiple regression calculate relationship species.tools use special methods optimize network construction, SparCC, etc.","code":""},{"path":"construction.html","id":"correlation","chapter":"2 Construction","heading":"2.2.1 Correlation","text":"Correlation statistical term describing degree two variables move coordination one-another.Correlation calculation first step omics network analysis software, many method get \\(\\rho\\) \\(p\\)-value. However, data size omics grow larger larger, many methods become time computational resource consuming., provide c_net_cal() function one single table two tables calculate correlation fastly (Figure 2.1), return three elements list include \\(\\rho\\), \\(p\\)-value \\(p\\)-adjust.\nFigure 2.1: network build packages comparison\n","code":"\n#single table\nt(otutab) -> totu\nc_net_cal(totu,method = \"spearman\", filename =F,p.adjust.method = NULL) -> corr\nstr(corr)\n#> List of 3\n#>  $ r       : num [1:492, 1:492] 1 -0.2508 0.1847 0.0114 0.2095 ...\n#>   ..- attr(*, \"dimnames\")=List of 2\n#>   .. ..$ : chr [1:492] \"s__un_f__Thermomonosporaceae\" \"s__Pelomonas_puraquae\" \"s__Rhizobacter_bergeniae\" \"s__Flavobacterium_terrae\" ...\n#>   .. ..$ : chr [1:492] \"s__un_f__Thermomonosporaceae\" \"s__Pelomonas_puraquae\" \"s__Rhizobacter_bergeniae\" \"s__Flavobacterium_terrae\" ...\n#>  $ p.value : num [1:492, 1:492] 0 0.316 0.463 0.964 0.404 ...\n#>   ..- attr(*, \"dimnames\")=List of 2\n#>   .. ..$ : chr [1:492] \"s__un_f__Thermomonosporaceae\" \"s__Pelomonas_puraquae\" \"s__Rhizobacter_bergeniae\" \"s__Flavobacterium_terrae\" ...\n#>   .. ..$ : chr [1:492] \"s__un_f__Thermomonosporaceae\" \"s__Pelomonas_puraquae\" \"s__Rhizobacter_bergeniae\" \"s__Flavobacterium_terrae\" ...\n#>  $ p.adjust: num [1:492, 1:492] 0 0.316 0.463 0.964 0.404 ...\n#>   ..- attr(*, \"dimnames\")=List of 2\n#>   .. ..$ : chr [1:492] \"s__un_f__Thermomonosporaceae\" \"s__Pelomonas_puraquae\" \"s__Rhizobacter_bergeniae\" \"s__Flavobacterium_terrae\" ...\n#>   .. ..$ : chr [1:492] \"s__un_f__Thermomonosporaceae\" \"s__Pelomonas_puraquae\" \"s__Rhizobacter_bergeniae\" \"s__Flavobacterium_terrae\" ...\n#>  - attr(*, \"class\")= chr \"corr\"\n\n#two tables\nmetadata[,3:10] -> env\nc_net_cal(totu,env,method = \"spearman\", filename =F,p.adjust.method = NULL) -> corr2\nstr(corr2)\n#> List of 3\n#>  $ r       : num [1:492, 1:8] 0.356 -0.5253 0.0918 -0.0114 -0.0196 ...\n#>   ..- attr(*, \"dimnames\")=List of 2\n#>   .. ..$ : chr [1:492] \"s__un_f__Thermomonosporaceae\" \"s__Pelomonas_puraquae\" \"s__Rhizobacter_bergeniae\" \"s__Flavobacterium_terrae\" ...\n#>   .. ..$ : chr [1:8] \"env1\" \"env2\" \"env3\" \"env4\" ...\n#>  $ p.value : num [1:492, 1:8] 0.147 0.0252 0.717 0.9643 0.9384 ...\n#>   ..- attr(*, \"dimnames\")=List of 2\n#>   .. ..$ : chr [1:492] \"s__un_f__Thermomonosporaceae\" \"s__Pelomonas_puraquae\" \"s__Rhizobacter_bergeniae\" \"s__Flavobacterium_terrae\" ...\n#>   .. ..$ : chr [1:8] \"env1\" \"env2\" \"env3\" \"env4\" ...\n#>  $ p.adjust: num [1:492, 1:8] 0.147 0.0252 0.717 0.9643 0.9384 ...\n#>   ..- attr(*, \"dimnames\")=List of 2\n#>   .. ..$ : chr [1:492] \"s__un_f__Thermomonosporaceae\" \"s__Pelomonas_puraquae\" \"s__Rhizobacter_bergeniae\" \"s__Flavobacterium_terrae\" ...\n#>   .. ..$ : chr [1:8] \"env1\" \"env2\" \"env3\" \"env4\" ...\n#>  - attr(*, \"class\")= chr \"corr\""},{"path":"construction.html","id":"distance","chapter":"2 Construction","heading":"2.2.2 Distance","text":"can use par_sim() calculate various distance get pairwise similarity matrix.","code":""},{"path":"construction.html","id":"sparcc","chapter":"2 Construction","heading":"2.2.3 SparCC","text":"SparCC fits Dirichlet distribution observed data, iteratively calculates proportion correlation species several times. resulting correlation median distribution. \\(p\\)-values calculated using bootstrap method.metric said useful non-normal microbiome data.\\(D(x_i,x_j)=var(\\log(\\frac{x_i}{x_j}))\\)par_sparcc() available SparCC calculation.","code":""},{"path":"construction.html","id":"others","chapter":"2 Construction","heading":"2.2.4 Others","text":"methods available network construction NetCoMi","code":""},{"path":"construction.html","id":"build-network","chapter":"2 Construction","heading":"2.3 Build network","text":"","code":""},{"path":"construction.html","id":"normally-build","chapter":"2 Construction","heading":"2.3.1 Normally build","text":"done c_net_cal(), can get network (igraph object) easily c_net_build(). common attributes set automatically.\nFigure 2.2: Simple co-occurrence network\n\nFigure 2.3: Simple bipartite network\n","code":"\nc_net_build(corr,r_thres = 0.6,p_thres = 0.05,del_single = T) -> co_net\nco_net\n#> ====================================metanet===================================== \n#> IGRAPH 8746e6f UNW- 490 1545 -- \n#> + attr: n_type (g/c), name (v/c), v_group (v/c),\n#> | v_class (v/c), size (v/n), label (v/c), shape\n#> | (v/c), color (v/c), id (e/n), from (e/c), to (e/c),\n#> | weight (e/n), cor (e/n), e_type (e/c), width (e/n),\n#> | v_group_from (e/c), v_group_to (e/c), e_class\n#> | (e/c), color (e/c), lty (e/n)\n#> + edges from 8746e6f (vertex names):\n#> [1] s__un_f__Thermomonosporaceae--s__Actinocorallia_herbida\n#> [2] s__un_f__Thermomonosporaceae--s__Kribbella_catacumbae  \n#> [3] s__un_f__Thermomonosporaceae--s__Kineosporia_rhamnosa  \n#> + ... omitted several edges\nplot(co_net)\nc_net_build(corr2) -> co_net2\nplot(co_net2)"},{"path":"construction.html","id":"multi-tables","chapter":"2 Construction","heading":"2.3.2 Multi-tables","text":"two tables correlation network analysis, can choose multi_net_build() calculate build network. subsequent multi-omics analysis, see Chapter ??.\nFigure 2.4: Simple multi-omics network\n","code":"\ndata(\"multi_test\")\n#microbiome\ndim(micro)\n#> [1] 18 50\n#metabolome\ndim(metab)\n#> [1] 18 50\n#transcriptome\ndim(transc)\n#> [1] 18 50\n\nmulti_net_build(micro,metab,transc,mode = \"full\",method = \"spearman\",filename = F)->multi1\n#> Calculating 18 samples and 150 objects of 3 groups.\n\nplot(multi1)"},{"path":"construction.html","id":"edgelist","chapter":"2 Construction","heading":"2.3.3 Edgelist","text":"already get pairwise relationship data approaches (database), can form edgelist use c_net_from_edgelist build network. useful following analysis.\nFigure 2.5: Simple directed network\n","code":"\ndata(\"edgelist\",package = \"MetaNet\")\ndnet=c_net_from_edgelist(arc_count,direct = T)\nplot(dnet)"},{"path":"construction.html","id":"rmt-optimize","chapter":"2 Construction","heading":"2.4 RMT optimize","text":"correlation-based relevance network method commonly used largely due simple calculation procedure noise tolerance. However, studies involving relevance network analysis use arbitrary thresholds (usually, use r>0.6, p<0.05), thus constructed networks subjective rather objective.problem solved random matrix theory (RMT)-based approach (Figure 2.6), able automatically identify threshold cellular network construction micro-array data (3).\nFigure 2.6: Random matrix theory (RMT)-based approach\nuse RMT_threshold() , can find best r_threshold make network smallest noise.bigger log_LE, less log_LW, less log_see, bigger p_ks_test indicate better r_threshold meaningful network construction.can change threshold range calculate finely.\nFigure 2.7: RMT_threshold result 0.5 0.9\ncan set gif=T RMT_threshold get gif file observe distribution eigenvalue spacing different r-thresholds.\nFigure 2.8: distribution eigenvalue spacing 0.5 0.9\n","code":"\nRMT_threshold(corr,min_threshold = 0.5,max_threshold = 0.9, step = 0.02,verbose = T)->rmt_res\nplot(rmt_res)"},{"path":"manipulation.html","id":"manipulation","chapter":"3 Manipulation","heading":"3 Manipulation","text":"build network, can see class network metanet, derived object igraph. functions used igraph can also use network.Besides, functions us manipulate metanet easily.","code":"\ndata(otutab,package = \"pcutils\")\nt(otutab) -> totu\nc_net_cal(totu,method = \"spearman\", filename =F, p.adjust.method = NULL) -> corr\nc_net_build(corr,r_thres = 0.6,p_thres = 0.05,del_single = T) -> co_net\nclass(co_net)\n#> [1] \"metanet\" \"igraph\""},{"path":"manipulation.html","id":"attributes","chapter":"3 Manipulation","heading":"3.1 Attributes","text":"get attributes whole network, vertex edge get_*() dataframe:can see, attributes set build network like v_group, internal attributes metanet related following analysis visualization.Table 3.1:  Internal attributes metanet.talk set attributes specific analysis later.","code":"\n#get network attributes\nget_n(co_net)\n#>   n_type\n#> 1 single\n#get vertex attributes\nget_v(co_net)%>%head(5)\n#>                           name  v_group  v_class size\n#> 1 s__un_f__Thermomonosporaceae v_group1 v_class1    4\n#> 2        s__Pelomonas_puraquae v_group1 v_class1    4\n#> 3     s__Rhizobacter_bergeniae v_group1 v_class1    4\n#> 4     s__Flavobacterium_terrae v_group1 v_class1    4\n#> 5         s__un_g__Rhizobacter v_group1 v_class1    4\n#>                          label  shape   color\n#> 1 s__un_f__Thermomonosporaceae circle #a6bce3\n#> 2        s__Pelomonas_puraquae circle #a6bce3\n#> 3     s__Rhizobacter_bergeniae circle #a6bce3\n#> 4     s__Flavobacterium_terrae circle #a6bce3\n#> 5         s__un_g__Rhizobacter circle #a6bce3\n#get edge attributes\nget_e(co_net)%>%head(5)\n#>   id                         from\n#> 1  1 s__un_f__Thermomonosporaceae\n#> 2  2 s__un_f__Thermomonosporaceae\n#> 3  3 s__un_f__Thermomonosporaceae\n#> 4  4 s__un_f__Thermomonosporaceae\n#> 5  5 s__un_f__Thermomonosporaceae\n#>                              to    weight       cor\n#> 1     s__Actinocorallia_herbida 0.6759546 0.6759546\n#> 2       s__Kribbella_catacumbae 0.6742386 0.6742386\n#> 3       s__Kineosporia_rhamnosa 0.7378741 0.7378741\n#> 4   s__un_f__Micromonosporaceae 0.6236449 0.6236449\n#> 5 s__Flavobacterium_saliperosum 0.6045747 0.6045747\n#>     e_type     width v_group_from v_group_to e_class\n#> 1 positive 0.6759546     v_group1   v_group1   intra\n#> 2 positive 0.6742386     v_group1   v_group1   intra\n#> 3 positive 0.7378741     v_group1   v_group1   intra\n#> 4 positive 0.6236449     v_group1   v_group1   intra\n#> 5 positive 0.6045747     v_group1   v_group1   intra\n#>     color lty\n#> 1 #48A4F0   1\n#> 2 #48A4F0   1\n#> 3 #48A4F0   1\n#> 4 #48A4F0   1\n#> 5 #48A4F0   1"},{"path":"manipulation.html","id":"annotation","chapter":"3 Manipulation","heading":"3.2 Annotation","text":"Sometimes lots annotation tables need add network, abundance table, taxonomy table ,\ncan use anno_vertex() anno_edge() .\nannotation dataframe needs rowname “name” column, anno_vertex() automatically match vertex name combine table.anno_edge() receives format annotation dataframe anno_vertex(), automatically match “” “” columns can summary links.MetaNet provides function c_net_set() easily annotation one table (’s normal multi-omics analysis).vector absolutely know matches vertex name network,\ncan use igraph method annotate (Don’t recommend), edge annotate vector:","code":"\nanno_vertex(co_net, taxonomy)->co_net1\nget_v(co_net1)%>%head(5)\n#>                           name  v_group  v_class size\n#> 1 s__un_f__Thermomonosporaceae v_group1 v_class1    4\n#> 2        s__Pelomonas_puraquae v_group1 v_class1    4\n#> 3     s__Rhizobacter_bergeniae v_group1 v_class1    4\n#> 4     s__Flavobacterium_terrae v_group1 v_class1    4\n#> 5         s__un_g__Rhizobacter v_group1 v_class1    4\n#>                          label  shape   color     Kingdom\n#> 1 s__un_f__Thermomonosporaceae circle #a6bce3 k__Bacteria\n#> 2        s__Pelomonas_puraquae circle #a6bce3 k__Bacteria\n#> 3     s__Rhizobacter_bergeniae circle #a6bce3 k__Bacteria\n#> 4     s__Flavobacterium_terrae circle #a6bce3 k__Bacteria\n#> 5         s__un_g__Rhizobacter circle #a6bce3 k__Bacteria\n#>              Phylum                  Class\n#> 1 p__Actinobacteria      c__Actinobacteria\n#> 2 p__Proteobacteria  c__Betaproteobacteria\n#> 3 p__Proteobacteria c__Gammaproteobacteria\n#> 4  p__Bacteroidetes      c__Flavobacteriia\n#> 5 p__Proteobacteria c__Gammaproteobacteria\n#>                 Order                 Family\n#> 1  o__Actinomycetales f__Thermomonosporaceae\n#> 2  o__Burkholderiales      f__Comamonadaceae\n#> 3  o__Pseudomonadales    f__Pseudomonadaceae\n#> 4 o__Flavobacteriales   f__Flavobacteriaceae\n#> 5  o__Pseudomonadales    f__Pseudomonadaceae\n#>                          Genus                      Species\n#> 1 g__un_f__Thermomonosporaceae s__un_f__Thermomonosporaceae\n#> 2                 g__Pelomonas        s__Pelomonas_puraquae\n#> 3               g__Rhizobacter     s__Rhizobacter_bergeniae\n#> 4            g__Flavobacterium     s__Flavobacterium_terrae\n#> 5               g__Rhizobacter         s__un_g__Rhizobacter\nanno_edge(co_net, select(taxonomy,\"Phylum\"))->co_net1\nget_e(co_net1)%>%head(5)\n#>   id                         from\n#> 1  1 s__un_f__Thermomonosporaceae\n#> 2  2 s__un_f__Thermomonosporaceae\n#> 3  3 s__un_f__Thermomonosporaceae\n#> 4  4 s__un_f__Thermomonosporaceae\n#> 5  5 s__un_f__Thermomonosporaceae\n#>                              to    weight       cor\n#> 1     s__Actinocorallia_herbida 0.6759546 0.6759546\n#> 2       s__Kribbella_catacumbae 0.6742386 0.6742386\n#> 3       s__Kineosporia_rhamnosa 0.7378741 0.7378741\n#> 4   s__un_f__Micromonosporaceae 0.6236449 0.6236449\n#> 5 s__Flavobacterium_saliperosum 0.6045747 0.6045747\n#>     e_type     width v_group_from v_group_to e_class\n#> 1 positive 0.6759546     v_group1   v_group1   intra\n#> 2 positive 0.6742386     v_group1   v_group1   intra\n#> 3 positive 0.7378741     v_group1   v_group1   intra\n#> 4 positive 0.6236449     v_group1   v_group1   intra\n#> 5 positive 0.6045747     v_group1   v_group1   intra\n#>     color lty       Phylum_from         Phylum_to\n#> 1 #48A4F0   1 p__Actinobacteria p__Actinobacteria\n#> 2 #48A4F0   1 p__Actinobacteria p__Actinobacteria\n#> 3 #48A4F0   1 p__Actinobacteria p__Actinobacteria\n#> 4 #48A4F0   1 p__Actinobacteria p__Actinobacteria\n#> 5 #48A4F0   1 p__Actinobacteria  p__Bacteroidetes\nAbundance_df=data.frame(\"Abundance\"=colSums(totu))\nco_net1<-c_net_set(co_net,taxonomy,Abundance_df)\nget_v(co_net1)%>%head(5)\n#>                           name  v_group  v_class size\n#> 1 s__un_f__Thermomonosporaceae v_group1 v_class1    4\n#> 2        s__Pelomonas_puraquae v_group1 v_class1    4\n#> 3     s__Rhizobacter_bergeniae v_group1 v_class1    4\n#> 4     s__Flavobacterium_terrae v_group1 v_class1    4\n#> 5         s__un_g__Rhizobacter v_group1 v_class1    4\n#>                          label  shape   color     Kingdom\n#> 1 s__un_f__Thermomonosporaceae circle #a6bce3 k__Bacteria\n#> 2        s__Pelomonas_puraquae circle #a6bce3 k__Bacteria\n#> 3     s__Rhizobacter_bergeniae circle #a6bce3 k__Bacteria\n#> 4     s__Flavobacterium_terrae circle #a6bce3 k__Bacteria\n#> 5         s__un_g__Rhizobacter circle #a6bce3 k__Bacteria\n#>              Phylum                  Class\n#> 1 p__Actinobacteria      c__Actinobacteria\n#> 2 p__Proteobacteria  c__Betaproteobacteria\n#> 3 p__Proteobacteria c__Gammaproteobacteria\n#> 4  p__Bacteroidetes      c__Flavobacteriia\n#> 5 p__Proteobacteria c__Gammaproteobacteria\n#>                 Order                 Family\n#> 1  o__Actinomycetales f__Thermomonosporaceae\n#> 2  o__Burkholderiales      f__Comamonadaceae\n#> 3  o__Pseudomonadales    f__Pseudomonadaceae\n#> 4 o__Flavobacteriales   f__Flavobacteriaceae\n#> 5  o__Pseudomonadales    f__Pseudomonadaceae\n#>                          Genus                      Species\n#> 1 g__un_f__Thermomonosporaceae s__un_f__Thermomonosporaceae\n#> 2                 g__Pelomonas        s__Pelomonas_puraquae\n#> 3               g__Rhizobacter     s__Rhizobacter_bergeniae\n#> 4            g__Flavobacterium     s__Flavobacterium_terrae\n#> 5               g__Rhizobacter         s__un_g__Rhizobacter\n#>   Abundance\n#> 1     26147\n#> 2     25217\n#> 3     16592\n#> 4     16484\n#> 5     13895\nco_net1=co_net\n\n#add vertex attribute\nV(co_net1)$new_attri=seq_len(length(co_net1))\nget_v(co_net1)%>%head(5)\n#>                           name  v_group  v_class size\n#> 1 s__un_f__Thermomonosporaceae v_group1 v_class1    4\n#> 2        s__Pelomonas_puraquae v_group1 v_class1    4\n#> 3     s__Rhizobacter_bergeniae v_group1 v_class1    4\n#> 4     s__Flavobacterium_terrae v_group1 v_class1    4\n#> 5         s__un_g__Rhizobacter v_group1 v_class1    4\n#>                          label  shape   color new_attri\n#> 1 s__un_f__Thermomonosporaceae circle #a6bce3         1\n#> 2        s__Pelomonas_puraquae circle #a6bce3         2\n#> 3     s__Rhizobacter_bergeniae circle #a6bce3         3\n#> 4     s__Flavobacterium_terrae circle #a6bce3         4\n#> 5         s__un_g__Rhizobacter circle #a6bce3         5\n\n#add edge attribute\nE(co_net1)$new_attri=\"new attribute\"\nget_e(co_net1)%>%head(5)\n#>   id                         from\n#> 1  1 s__un_f__Thermomonosporaceae\n#> 2  2 s__un_f__Thermomonosporaceae\n#> 3  3 s__un_f__Thermomonosporaceae\n#> 4  4 s__un_f__Thermomonosporaceae\n#> 5  5 s__un_f__Thermomonosporaceae\n#>                              to    weight       cor\n#> 1     s__Actinocorallia_herbida 0.6759546 0.6759546\n#> 2       s__Kribbella_catacumbae 0.6742386 0.6742386\n#> 3       s__Kineosporia_rhamnosa 0.7378741 0.7378741\n#> 4   s__un_f__Micromonosporaceae 0.6236449 0.6236449\n#> 5 s__Flavobacterium_saliperosum 0.6045747 0.6045747\n#>     e_type     width v_group_from v_group_to e_class\n#> 1 positive 0.6759546     v_group1   v_group1   intra\n#> 2 positive 0.6742386     v_group1   v_group1   intra\n#> 3 positive 0.7378741     v_group1   v_group1   intra\n#> 4 positive 0.6236449     v_group1   v_group1   intra\n#> 5 positive 0.6045747     v_group1   v_group1   intra\n#>     color lty     new_attri\n#> 1 #48A4F0   1 new attribute\n#> 2 #48A4F0   1 new attribute\n#> 3 #48A4F0   1 new attribute\n#> 4 #48A4F0   1 new attribute\n#> 5 #48A4F0   1 new attribute"},{"path":"manipulation.html","id":"filter-sub-net","chapter":"3 Manipulation","heading":"3.3 Filter (Sub-net)","text":"setting network properly, may need analysis part whole network (especially multi-omics analysis),\nc_net_filter() can get sub-net conveniently (Figure 3.1), can put lots filter conditions :\nFigure 3.1: whole network filter sub-net.\n","code":"\ndata(\"multi_net\",package = \"MetaNet\")\nmulti2=c_net_filter(multi1,v_group%in%c(\"omic1\",\"omic2\"))%>%c_net_filter(.,e_class==\"intra\",mode = \"e\")\n\npar(mfrow=c(2,1))\nplot(multi1,lty_legend=T,main=\"Before filtering network\")#before filter\nplot(multi2,lty_legend=T,main=\"After filtering network\") #after filter"},{"path":"manipulation.html","id":"skeleton","chapter":"3 Manipulation","heading":"3.4 Skeleton","text":"want summary edges source target according one group, summ_2col easy way get information. direct = F argument means undirected relationship, “-b” “b-” summary one type edge.\nTable 3.2: Summary edges according Phylum\ncan use sankey plot display links.\nFigure 3.2: Sankey plot display edges according Phylum\nuse circlize plot display. link_stat() arguments summ_2col() summary edges.\nFigure 3.3: Circlize plot display edges according Phylum\nimportant action network extracting skeleton according one group, call get skeleton plot.\nget_group_skeleton() can annotate nodes group combine group nodes big node,\ncalculate new links groups. plot shows flows different groups clearly.\nway, result display different edge types, just want summary edges, set e_type one character (use c_net_set() 4.1.1).\nFigure 3.4: Skeleton plot according Phylum.\n\nFigure 3.5: Skeleton plot according Phylum.\n","code":"\nanno_edge(co_net, select(taxonomy,\"Phylum\"))->co_net1\ndf=get_e(co_net1)[,c(\"Phylum_from\",\"Phylum_to\")]\nsumm_2col(df,direct = F)%>%arrange(-count)->Phylum_from_to\nkbl(Phylum_from_to,caption = \"Summary of edges according to Phylum\") %>%\n  kable_paper() %>%\n  scroll_box(width = \"100%\", height = \"400px\")\npcutils::my_sankey(Phylum_from_to,dragY =T,fontSize = 10,width=600,numberFormat = \",.4\")\nanno_vertex(co_net, select(taxonomy,\"Phylum\"))->co_net1\nlinks_stat(co_net1,topN = 5,group = \"Phylum\",inter = \"all\")\nget_group_skeleton(co_net1,Group = \"Phylum\")->ske_net\nplot(ske_net,vertex.label=NA,legend_position=c(left_leg_x=-2.5))"},{"path":"manipulation.html","id":"export","chapter":"3 Manipulation","heading":"3.5 Export","text":"MetaNet also support export various format network files (dataframe, graphml,…) following analysis softwares (Cytoscape, Gephi…).","code":"\nc_net_save(co_net,filename = \"My_net\",format = \"data.frame\")\n\nc_net_save(co_net,filename = \"My_net\",format = \"graphml\")"},{"path":"visualization.html","id":"visualization","chapter":"4 Visualization","heading":"4 Visualization","text":"MetaNet supports basic R plot provides interfaces software (Gephi, Cytoscape, ggplot, networkD3) visualization,\nalso lot layout methods better display.","code":""},{"path":"visualization.html","id":"basic-plot","chapter":"4 Visualization","heading":"4.1 Basic plot","text":"","code":""},{"path":"visualization.html","id":"set-attri","chapter":"4 Visualization","heading":"4.1.1 Set attributes","text":"mentioned earlier, internal attributes set building network, related network visualization (Table 3.1).\ncan use c_net_set() custom attributes fitting research needs.\nGive network various annotate tables determine columns use set,\ncan give columns name (one ) vertex_group, vertex_class, vertex_size, edge_type, edge_class, edge_width.\nColors, linetypes, shapes legends assigned automatically, just use plot() get basic metanet figure.\nFigure 4.1: Basic plot function\n","code":"\ndata(\"multi_test\",package = \"MetaNet\")\ndata(\"c_net\",package = \"MetaNet\")\n#build a multi-network\nmulti_net_build(micro,metab,transc)->multi1\n#> Calculating 18 samples and 150 objects of 3 groups.\n#v_group is default, three different table\n\n#set vertex_class\nmulti1=c_net_set(multi1,micro_g,metab_g,transc_g,vertex_class = c(\"Phylum\",\"kingdom\",\"type\"))\n#set vertex_size\nmulti1=c_net_set(multi1,\n                 data.frame(\"Abundance1\"=colSums(micro)),\n                 data.frame(\"Abundance2\"=colSums(metab)),\n                 data.frame(\"Abundance3\"=colSums(transc)),vertex_size =paste0(\"Abundance\",1:3))\n\nplot(multi1)"},{"path":"visualization.html","id":"plot-setting","chapter":"4 Visualization","heading":"4.1.2 Plot setting","text":"want custom network plot flexibility, use c_net_plot() contains igraph arguments arguments.\narguments c_net_plot() show Table 5.1, different igraph original definition.\nTable 4.1: Description c_net_plot() arguments.\ncooridnates dataframelayout function (e.g. as_star(), as_tree(), in_circle(), nicely()… see help(c_net_lay))\n","code":""},{"path":"visualization.html","id":"layout","chapter":"4 Visualization","heading":"4.2 Layout","text":"Layout important part network visualization, good layout present information clearly.\n, MetaNet, always use dataframe store coordinates layout.\ncoors three-columns dataframe contains name, X, Y.","code":""},{"path":"visualization.html","id":"basic-layout","chapter":"4 Visualization","heading":"4.2.1 Basic layout","text":"Use c_net_lay() get coordinates specific layout methods.\nmethod can one as_line(), as_arc(), as_polygon(), as_polyarc(),\ngraph layouts igraph like as_star(),  as_tree(),  in_circle(),  nicely(),  on_grid(),  on_sphere(),  randomly(),  with_dh(),  with_fr(),  with_gem(),  with_graphopt(),  with_kk(),  with_lgl(),  with_mds().\nFigure 4.2: Layout methods c_net_lay()\nmethod, can add arguments :as_polygon() interesting:\nFigure 4.3: Layout as_polygon() c_net_lay\n","code":"\n#get a metanet\ngo=erdos.renyi.game(30,0.25)\ngo=c_net_update(go)\n\nplot(go,coors=with_fr())\nplot(go,coors=with_fr(niter = 99,grid = \"nogrid\"))"},{"path":"visualization.html","id":"group-layout","chapter":"4 Visualization","heading":"4.2.2 Group layout","text":"Beside c_net_lay(), provide advanced layout method network group variable: g_lay().\neasy use g_lay() control group position layout group.First, assign group variable.Give layout1 group position, one \n1.dataframe matrix: rowname group, two columns X Y\n2.function: layout method c_net_lay() default: in_circle()Adjust zoom1 layout1.Give layout2 (layout method c_net_lay()) group layout, use list contains functions match group.Adjust zoom2 layout2. can use vector adjust group zoom.use show_big_lay = T look layout1 distribution.\nFigure 4.4: Simple usage g_lay()\nlayout1 also receive matrix dataframe, can use group skeleton network adjust layout.\nFigure 4.5: Use tkplot adjust big layout.\n\nFigure 4.6: Use tkplot adjust big layout.\nway, g_lay_nice(), g_lay_polyarc(), g_lay_polygon() also good group layout method.\nFigure 4.7: Usage g_lay_nice() g_lay_polyarc()\ncan plot complex module-plot.","code":"\npar(mfrow=c(2,1))\n#set circle layout\ng_lay(multi1,group =\"v_group\",layout1 =in_circle(), zoom1=10,layout2 =in_circle(),zoom2 = 5)->g_coors\nplot(multi1,coors=g_coors)\n#set different layout for each group\ng_lay(multi1,group =\"v_group\",layout1 =in_circle(), zoom1=10,layout2 =list(in_circle(),with_fr(),as_polygon()),zoom2 = 3:5)->g_coors\nplot(multi1,coors=g_coors)\ng_lay(co_net,group =\"v_class\",layout1 =in_circle(), zoom1=10,\n      layout2 =in_circle(),zoom2 = c(1,5,2,1,3,7))->g_coors\nplot(co_net,coors=g_coors)\n\n#firstly get the skeleton plot\nget_group_skeleton(co_net,\"v_class\")->s_net\nV(s_net)$size=10;E(s_net)$width=1\n#then use tkplot to do manual adjustment.\nx <- igraph::tkplot(s_net)\n#Here: Move nodes within the tkplot window to a layout you like!\nda <- igraph::tkplot.getcoords(x)\n#close the window\nigraph::tkplot.close(x)\n#pass the da to layout1\ng_lay(co_net,group =\"v_class\",layout1 =da, zoom1=20,\n      layout2 =in_circle(),zoom2 = c(1,4,2,1,3,5))->g_coors\nplot(co_net,coors=g_coors)\npar(mfrow=c(2,1))\ng_lay_nice(co_net,group = \"v_class\")->g_coors\nplot(co_net,coors=g_coors)\ng_lay_polyarc(co_net,group = \"v_class\",group2_order = \"size\")->g_coors\nplot(co_net,coors=g_coors)\n#plot_gg_circle(multi1)"},{"path":"visualization.html","id":"other-styles","chapter":"4 Visualization","heading":"4.3 Other styles","text":"","code":""},{"path":"visualization.html","id":"ggplot","chapter":"4 Visualization","heading":"4.3.1 ggplot","text":"familiar ggplot2, use function .ggig() transfer basic R plot ggplot2 style, can use convient function like labs(), theme(), ggsave(), cowplot::plot_grid() make better figure.\nFigure 4.8: Plot network ggplot2 style\n","code":"\nto.ggig(multi1)->ggig\nplot(ggig)"},{"path":"visualization.html","id":"gephi","chapter":"4 Visualization","heading":"4.3.2 Gephi","text":"dealing big dataset, recommend use Gephi layout.\nprovide interface Gephi graphml format file, can use algorithm export graphml file.","code":"\nplot(co_net)\nc_net_save(co_net,filename = \"test\",format = \"graphml\")\n#then input test.graphml to Gephi and do a layout\n\n#and export a graphml file from Gephi: test2.graphml, So you can re-draw it in MetaNet\ninput_gephi(\"test2.graphml\")->gephi\n\nc_net_plot(co_net,coors = gephi$coors,legend_number = T,group_legend_title = \"Phylum\")"},{"path":"visualization.html","id":"cytoscape","chapter":"4 Visualization","heading":"4.3.3 Cytoscape","text":"Cytoscape also pretty software network visualization contains lots plugins. Use “data.frame” format transfer network.","code":"\nc_net_save(co_net,filename = \"test\",format = \"data.frame\")\n#then input test_nodes.csv and test_edge.csv to Cytoscape."},{"path":"visualization.html","id":"networkd3","chapter":"4 Visualization","heading":"4.3.4 NetworkD3","text":"NetworkD3 can produce interactive network plot based JavaScript,\noutput object htmlwidgets suitable website.\nFigure 4.9: Plot network NetworkD3 style\n","code":"\nnetD3plot(multi1)"},{"path":"topology.html","id":"topology","chapter":"5 Topology","heading":"5 Topology","text":"","code":""},{"path":"topology.html","id":"complex-network","chapter":"5 Topology","heading":"5.1 Complex network","text":"microbial co-occurrence network study complex network, generally following characteristics, scale-free, small-world attributes, modularity hierarchy.\nTable 4.1: Common characteristic\nfit_power() used prove scale-free. smallworldness() can calculate smallworld index.\nFigure 5.1: Fit power-law distribution network.\n","code":"\ndata(\"c_net\",package = \"MetaNet\")\n\nfit_power(co_net)\nsmallworldness(co_net)\n## 43.09368"},{"path":"topology.html","id":"modules","chapter":"5 Topology","heading":"5.2 Modules","text":"community subgraph containing nodes densely linked rest graph equivalently,\ngraph community structure number links subgraph higher number links subgraphs.Use modu_net() generate n-modules network modules analysis test.\nFigure 5.2: 3-modules network generated modu_net()\n","code":"\ntest_modu_net=modu_net(n_modu = 3,n_node_in_modu = 30)\nplot(test_modu_net,mark_module=T)"},{"path":"topology.html","id":"module-detection","chapter":"5 Topology","heading":"5.2.1 Module detection","text":"Algorithms:short random walksshort random walksleading eigenvector community matrixleading eigenvector community matrixsimulated annealing approachsimulated annealing approachgreedy modularity optimizationgreedy modularity optimization……can get network modules modu_dect() various methods.\nsometimes just focus several modules instead ,\ncan use filter_n_modu() get modules n nodes, keep modules ids.\nFigure 5.3: Module detection results modu_dect()\nLook components network, small sub_graphs effect modules,\ncare small components, can just filter .Use plot_module_tree() can display relationship nodes, combine_n_modu() can change module numbers \nspecific number (can big small small small sub_graphs)\nFigure 5.4: Modules tree\nalso use network module indicates cluster similar expression.\nfilter positive edges firstly module detection consider topology structure rather edge type.\nfiltering positive edges module detection find modules like WGCNA gene modules,\ncan also get “eigengene” using module_eigen() general look module expression module_expression().\nFigure 5.5: Filter positive modules.\n\nFigure 5.6: Module eigenvalue positive cluster.\n\nFigure 5.7: Summary variables modules.\nUse links_stat() summary edges find edges module module (means module detection OK).\nFigure 5.8: Summary edges modules\n","code":"\npar(mfrow=c(2,2),mai=rep(1,4))\n#module detection\nmodu_dect(co_net,method = \"cluster_fast_greedy\") -> co_net_modu\nget_v(co_net_modu)[,c(\"name\",\"module\")]%>%head()\n#>                           name module\n#> 1 s__un_f__Thermomonosporaceae      9\n#> 2        s__Pelomonas_puraquae      1\n#> 3     s__Rhizobacter_bergeniae      4\n#> 4     s__Flavobacterium_terrae     11\n#> 5         s__un_g__Rhizobacter      6\n#> 6     s__un_o__Burkholderiales      1\n\nplot(co_net_modu,plot_module=T,mark_module=T,legend_position=c(-1.8,1.6,1.1,1.3))\ntable(V(co_net_modu)$module)\n#> \n#>  1 10 11 12 13 14 15 16 17 18 19  2 20 21 22 23 24 25 26 27 \n#> 61 28 18 14 16 21 15  8  6  2  4 42  3  3  2  2  2  2  2  3 \n#> 28 29  3 30  4  5  6  7  8  9 \n#>  2  3 30  2 31 24 18 21 28 16\n\n#keep some modules\nco_net_modu2=filter_n_modu(co_net_modu,n_modu = 30,keep_id = 10)\nplot(co_net_modu2,plot_module=T,mark_module=T,legend_position=c(-1.8,1.3,1.1,1.3))\n\n#change group layout\ng_lay_nice(co_net_modu,group = \"module\")->coors\nplot(co_net_modu2,coors=coors,plot_module=T,mark_module=T)\n\n#extract some modules, delete =T will delete other modules.\nco_net_modu3=filter_n_modu(co_net_modu,n_modu = 30,keep_id = 10,delete = T)\nplot(co_net_modu3,coors,plot_module=T)\ntable(V(co_net_modu)$components)\n#> \n#>   1  10  11  12  13  14  15   2   3   4   5   6   7   8   9 \n#> 391   2   3   3   2   2   2   2   6   4   2   2   3   2   3\nco_net_modu4=c_net_filter(co_net_modu,components==1)\n\n#re-do a module detection\nco_net_modu4=modu_dect(co_net_modu4)\ng_lay_nice(co_net_modu4,group = \"module\")->coors\nplot(co_net_modu4,coors,plot_module=T)\np1=plot_module_tree(co_net_modu4,label.size = 0.6)\n#combine 17 modules to 5.\nco_net_modu5=combine_n_modu(co_net_modu4,5)\np2=plot_module_tree(co_net_modu5,label.size = 0.6)\np1+p2\ndata(\"otutab\",package = \"pcutils\")\ntotu=t(otutab)\n#filter positive edges\nc_net_filter(co_net,e_type==\"positive\",mode = \"e\")->co_net_pos\nco_net_pos_modu=modu_dect(co_net_pos,n_modu = 10,delete = T)\n\ng_lay_nice(co_net_pos_modu,group = \"module\")->coors1\nplot(co_net_pos_modu,coors1,plot_module=T)\n#map the original abundance table\nmodule_eigen(co_net_pos_modu,totu)->co_net_pos_modu\n\n#plot the expression pattern\np1=module_expression(co_net_pos_modu,totu,cor = 0.6,facet_param = list(ncol=4),plot_eigen = T)+\n  theme(axis.text.x = element_text(size=5,angle = 90,vjust = 0.5))\n\n#correlate to metadata\nenv=metadata[,3:8]\np2=cor_plot(get_module_eigen(co_net_pos_modu),env)+coord_flip()\n\np1/p2+patchwork::plot_layout(heights = c(2,1.4))\n#summary some variable according to modules.\np3=summ_module(co_net_pos_modu,var = \"Phylum\")\np4=summ_module(co_net_pos_modu,var = \"node_eigen_cor\")\np3+p4\nlinks_stat(co_net_modu2,group = \"module\",legend_number = T)"},{"path":"topology.html","id":"keystone","chapter":"5 Topology","heading":"5.2.2 Keystone","text":"determine modules network, topological role node can calculated according Zi-Pi (5). Within-module connectivity (Zi):\\(Z_i= \\frac{\\kappa_i-\\overline{\\kappa_si}}{\\sigma_{\\kappa_{si}}}\\) \\(κ_i\\) number links node nodes module si, \\(\\overline{\\kappa_{si}}\\) average k nodes si, \\(\\sigma_{\\kappa_{si}}\\) standard deviation κ si.Among-module connectivity (Pi):\\(P_i=1-\\sum_{s=1}^{N_m}{\\left( {\\frac{\\kappa_{}}{k_i}} \\right)^2}\\) \\(κ_{}\\) number links node nodes module s, \\(k_i\\) total degree node .researchers often divide module roles four categories:\nTable 5.1: topological role individual node\narticles define red categories keystone network (6).Use zp_analyse() get module roles store vertex attributes, can use zp_plot() visualize.\ncan see module hubs center module connector often mediate connection different modules.\nFigure 5.9: Nodes roles modular network.\n\nFigure 5.10: Zi-Pi analysis modular network.\n","code":"\nzp_analyse(co_net_modu4)->co_net_modu4\nget_v(co_net_modu4)[,c(1,16:21)]%>%head\n#>                           name components module\n#> 1 s__un_f__Thermomonosporaceae          1      3\n#> 2        s__Pelomonas_puraquae          1      1\n#> 3     s__Rhizobacter_bergeniae          1      4\n#> 4     s__Flavobacterium_terrae          1     10\n#> 5         s__un_g__Rhizobacter          1      3\n#> 6     s__un_o__Burkholderiales          1      1\n#>   origin_module Ki         Zi        Pi\n#> 1             3  3  0.4531635 0.3750000\n#> 2             1 16  2.2142712 0.2770083\n#> 3             4  4  1.0183901 0.5714286\n#> 4            10  4  1.8439089 0.0000000\n#> 5             3  1 -1.3594905 0.0000000\n#> 6             1 16  2.2142712 0.2037037\n#color map to roles\nco_net_modu6=c_net_set(co_net_modu4,vertex_class = \"roles\")\nplot(co_net_modu6,coors,mark_module=T,labels_num=0,group_legend_title=\"Roles\")\nlibrary(patchwork)\nzp_plot(co_net_modu4,mode = 1)+zp_plot(co_net_modu4,mode = 3)"},{"path":"topology.html","id":"topology-indexes","chapter":"5 Topology","heading":"5.3 Topology indexes","text":"lots topology indexes network analysis, collected many indexes often used biological research.\nFirst part topology indexes individual nodes.\nTable 5.2: Topology indexes individual nodes\nSecond part overall network topological indexes.\nTable 5.3: overall network topological indexes\nEdges topology indexes less.can get indexes easily using net_par().\ncan choose different mode (n,v,e) get network, vertexes edges indexes especially just use “” get list contains indexes.can use c_net_index() calculate topology indexes store network , useful need following visualization.\nFigure 5.11: Use vertex indexes visualization.\n","code":"\nmake_graph(\"Walther\") %>% net_par(mode = \"all\")\nmake_graph(\"Walther\") %>% net_par(mode = \"n\")\n#> $n_index\n#>      name num_nodes num_edges edge_density neg_percent\n#> 1 Walther        25        31    0.1033333          NA\n#>   ave_path_len global_efficiency ave_degree w_ave_degree\n#> 1     3.586667         0.3679762       2.48         2.48\n#>   diameter clusteringC cen_betweenness nat_connectivity\n#> 1        8           0       0.1436084         1.029526\n#> \n#> $v_index\n#> NULL\n#> \n#> $e_index\n#> NULL\n#get a metanet\ngo=erdos.renyi.game(30,0.25)\ngo=c_net_update(go)\npar(mfrow=c(1,2))\nplot(go,legend=F,main=\"Same size\")\n\n#calculate topology indexes and store\ngo=c_net_index(go)\nhead(get_v(go))\n#>   name label size  v_group  shape  v_class   color degree\n#> 1   n1    n1   12 v_group1 circle v_class1 #a6bce3     12\n#> 2   n2    n2   12 v_group1 circle v_class1 #a6bce3     10\n#> 3   n3    n3   12 v_group1 circle v_class1 #a6bce3     10\n#> 4   n4    n4   12 v_group1 circle v_class1 #a6bce3      5\n#> 5   n5    n5   12 v_group1 circle v_class1 #a6bce3      8\n#> 6   n6    n6   12 v_group1 circle v_class1 #a6bce3      5\n#>   clusteringC betweenness eccentricity  closeness hub_score\n#> 1   0.1818182   40.144078            2 0.02173913 1.0000000\n#> 2   0.2444444   22.337912            3 0.02040816 0.8552635\n#> 3   0.2444444   18.686765            3 0.02000000 0.9073534\n#> 4   0.2000000    3.986948            3 0.01724138 0.4107643\n#> 5   0.2857143   11.058859            3 0.01960784 0.7733400\n#> 6   0.3000000    2.625397            3 0.01694915 0.5020124\n\n#use vertex.size to indicate degree\ngo=c_net_set(go,vertex_size =\"degree\")\nplot(go,legend=F,main=\"Size map to degree\")"},{"path":"topology.html","id":"random-network","chapter":"5 Topology","heading":"5.4 Random network","text":"can use rand_net() generate random graphs according Erdos-Renyi model node number edge number network, compare two network.\nFigure 5.12: Comparison complex network random network degree distribution\nuse rand_net_par() generate lots random network summary topology indexes, use compare_rand() comparison.\nFigure 5.13: Comparison complex network random network indexes.\n","code":"\nrand_net(co_net)->random_net\nrand_net_par(co_net,reps = 30)->randp\nnet_par(co_net)->pars\ncompare_rand(pars,randp,index =c(\"ave_path_len\",\"clusteringC\"))"},{"path":"stability.html","id":"stability","chapter":"6 Stability","heading":"6 Stability","text":"important compare networks stability based different groups.\nMetaNet collects lots methods reflect stability complexity,\nalgorithms coded using Parallel Computing can much faster.construct network group specifically:calculation network stability provide parallel version, use parallel::detectCores()\nget device cores set threads >1 use parallel calculation.","code":"\ndata(\"otutab\",package = \"pcutils\")\n\n#extract three-group sub-nets\nhebing(otutab,metadata$Group)->otutab_G\nsub_net_par=extract_sub_net(co_net,otutab_G,save_net = \"Group_subnet\")\nsub_nets=readRDS(\"Group_subnet.RDS\")\n\nnames(sub_nets)\ndata(\"otutab\",package = \"pcutils\")\ntotu=t(otutab)\n#check all rows matched\nall(rownames(totu)==rownames(metadata))\n\nrmt=FALSE\nsub_nets=lapply(levels(metadata$Group), \\(i){\n  totu[rownames(filter(metadata,Group==!!i)),]->t_tmp\n  t_tmp[,colSums(t_tmp)>0]->t_tmp\n  c_net_cal(t_tmp)->c_tmp\n  if(rmt){\n    RMT_threshold(c_tmp,quite = T)->tmp_rmt\n    r_thres=tmp_rmt$r_threshold\n  }\n  else r_thres=0.6\n  c_net_build(c_tmp,r_thres = r_thres,p_thres = 0.01,del_single = T)->n_tmp\n  Abundance_df=data.frame(\"Abundance\"=colSums(t_tmp))\n  c_net_set(n_tmp,Abundance_df,taxonomy%>%select(\"Phylum\"),vertex_class = \"Phylum\",vertex_size = \"Abundance\")\n})\n\nnames(sub_nets)=levels(metadata$Group)"},{"path":"stability.html","id":"robust-test","chapter":"6 Stability","heading":"6.1 Robust test","text":"Robust test networks done natural connectivity can reflect stability networks (7).\nSpecifically, natural connectivity calculated removing nodes (remove five nodes network one time 70% nodes disappear),\ndowntrend level natural connectivity indicated connectivity performance network damaged certain extent.\nFigure 6.1: Robust test result.\n","code":"\n#recommend reps bigger than 99, you can set `threads >1` to use parallel calculation.\nrobust_test(sub_nets, partial = 0.5,step=10,reps=9,threads=1)->robust_res\nplot(robust_res,mode = 2)"},{"path":"stability.html","id":"community-stability","chapter":"6 Stability","heading":"6.2 Community stability","text":"Community stability can characterized various indexes, robustness, vulnerability cohesion.\nNetworks higher robustness lower vulnerability tend stable (8).\nAlso, community stability commonly associated negative interactions,\nhigh percentage negative correlations within communities essential maintaining stable ecological system.","code":""},{"path":"stability.html","id":"robustness","chapter":"6 Stability","heading":"6.2.1 Robustness","text":"robustness regarded 50% nodes randomly removed results based repetitions simulation.\nFigure 6.2: Robustness simulation result.\n","code":"\n#recommend reps bigger than 99, you can set `threads >1` to use parallel calculation.\nrobustness(sub_nets,keystone=F,reps=99,threads=1)->robustness_res\nplot(robustness_res,p_value2=T)"},{"path":"stability.html","id":"vulnerability","chapter":"6 Stability","heading":"6.2.2 Vulnerability","text":"evaluate speed disturbance spreading within network,\nglobal efficiency regarded average efficiency pairs nodes,\ncalculated number edges shortest path paired nodes.\nvulnerability, reflected relative contribution node globe efficiency,\nrepresented maximal vulnerability nodes network.\nFigure 5.2: Vulnerability calculate result.\n","code":"\n#You can set `threads >1` to use parallel calculation.\nvulnerability_res=vulnerability(sub_nets,threads = 1)\nplot(vulnerability_res)"},{"path":"stability.html","id":"cohesion","chapter":"6 Stability","heading":"6.2.3 Cohesion","text":"Cohesion calculated quantify connectivity microbial communities group.\nCohesion contains positive negative cohesion values,\nindicate associations taxa attributed positive negative species interactions\nwell similarities differences niches microbial taxa.Briefly, pairwise Pearson correlation matrix across taxa calculated based abundance-weighted matrix.\n“taxa shuffle” null module-correcting 200 simulations,\naverage positive negative correlations calculated get connectedness matrix.\nFinally, positive negative cohesions calculated sample respectively \nmultiplying abundance-weighted matrix connectedness matrix.\nabsolute value negative: positive cohesion important index community stability.\\(cohesion=\\sum_{=1}^{m}{{\\rm abundance}_i\\times connectness}_i\\)\nFigure 5.4: Cohesion result.\n","code":"\n#recommend reps bigger than 199, you can set `threads >1` to use parallel calculation.\nCohesion(otutab,reps = 9,threads = 1)->cohesion_res\np1=plot(cohesion_res,group = \"Group\",metadata,mode = 1)+theme_bw()\np2=plot(cohesion_res,group = \"Group\",metadata,mode = 2)\np1+p2"},{"path":"Multi-omics.html","id":"Multi-omics","chapter":"7 Multi-omics","heading":"7 Multi-omics","text":"","code":""},{"path":"Multi-omics.html","id":"case-study","chapter":"7 Multi-omics","heading":"7.1 Case study","text":"-depth multi-omic profiling performed sample including plasma proteomics (targeted untargeted),\nmetabolomics (untargeted), lipidomics (semi-targeted), gene expression (transcriptomics) peripheral blood mononuclear cells (PBMCs) (9).\nFigure 7.1: Overview study design including acute bout exercise\n","code":"\nlist.files(\"../exercise/\",pattern =\"*.csv\" )\nLipidomics=read.csv(\"../exercise/Lipidomics.csv\",check.names = F,row.names = 1)\nMetabolomics=read.csv(\"../exercise/Metabolomics.csv\",check.names = F,row.names = 1)\nProteomics=read.csv(\"../exercise/Proteomics.csv\",check.names = F,row.names = 1)\nTarg.proteomics=read.csv(\"../exercise/Targ.proteomics.csv\",check.names = F,row.names = 1)\n#a little big\n#Transcriptomics=read.csv(\"../exercise/Transcriptomics_VST_excl_3participants.csv\",check.names = F,row.names = 1)\nall_omics=list(Lipidomics=Lipidomics,Metabolomics=Metabolomics,Proteomics=Proteomics,Targ.proteomics=Targ.proteomics)\nall_omics=lapply(all_omics,\\(i){i[,unique(colnames(i))]})\nall_omics=lapply(all_omics,\\(i){i[is.na(i)]=0;i})\n#all_omics=lapply(all_omics, trans,method = \"hellinger\",margin=1)\n\nlapply(all_omics,rownames)%>%venn()\n\nmulti_net=multi_net_build(all_omics,method = \"spearman\",p.adjust.method=\"fdr\",\n                          r_thres = 0.7, p_thres = 0.05)\n\nc_net_lay(multi_net)->coors\nplot(multi_net,coors,legend_number=T)\nfit_power(multi_net)\nnet_par(multi_net,\"n\")\n\ng_lay_polygon(multi_net)->g_coors\nplot(multi_net,g_coors,legend_number=T,vertex.size=2)\n\nc_net_save(multi_net,\"multi_net\",format = \"graphml\")\n#use gephi to adjust\ngephi=input_gephi(\"multi_net_gephi.graphml\")\n\nplot(multi_net,gephi$coors,vertex.size=2,legend_number=T)\nmetatbl=readxl::read_xlsx(\"../exercise/1-s2.0-S0092867420305080-mmc1.xlsx\",sheet = \"meta\")\nanno=readxl::read_xlsx(\"../exercise/1-s2.0-S0092867420305080-mmc1.xlsx\",sheet = \"anno\")"},{"path":"references.html","id":"references","chapter":"References","heading":"References","text":"","code":""}]
